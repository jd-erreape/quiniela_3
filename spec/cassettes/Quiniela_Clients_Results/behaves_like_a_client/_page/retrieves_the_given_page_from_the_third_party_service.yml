---
http_interactions:
- request:
    method: get
    uri: https://www.loteriasyapuestas.es/es/resultados/quiniela
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Set-Cookie:
      - cms=AKMDMYF6b8Fr3aUC7e/pTw$$; Path=/; Secure
      - usr-lang=es; Path=/; Domain=".loteriasyapuestas.es";HttpOnly;Secure
      Date:
      - Wed, 25 Aug 2021 16:13:04 GMT
      Server:
      - Apache
      X-Frame-Options:
      - SAMEORIGIN
      Strict-Transport-Security:
      - max-age=15768000; includeSubdomains;
      Cache-Control:
      - no-transform
      Ot-Force-Account-Verify:
      - 'true'
      Content-Type:
      - text/html;charset=UTF-8
      Content-Language:
      - es-ES
      Vary:
      - Accept-Encoding,User-Agent
      X-Xss-Protection:
      - 1; mode=block
      X-Varnish:
      - 723725832 717813556
      Age:
      - '299'
      Via:
      - 1.1 varnish (Varnish/6.0)
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '48'
      Accept-Ranges:
      - bytes
      Content-Length:
      - '28576'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Script-Type" content="text/javascript">
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    	<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<script type='text/javascript'>
	var timeToGetJsonpSaga = "180000";
	var hostReferrerSaga = "juegos.loteriasyapuestas.es";
</script>
<title>La Quiniela | Resultados OFICIALES - Loterías y Apuestas del Estado</title>
	<meta name="keywords" content="La Quiniela | Resultados OFICIALES - Loterías y Apuestas del Estado" />
<meta name="description" content="Revisa recaudación, botes, premios y ganadores de todas las jornadas de La Quiniela. Toda la información aquí">
<meta name="copyright" content="2019 SELAE, Loter&iacute;as y Apuestas del Estado" />
<meta property="og:title" content="La Quiniela | Resultados OFICIALES - Loterías y Apuestas del Estado" />
			
	        <meta property="og:description" content="Revisa recaudación, botes, premios y ganadores de todas las jornadas de La Quiniela. Toda la información aquí" />
			<meta property="og:locale" content="es_ES" />
			<meta property='og:type' content='website' />
			<meta property="og:site_name" content="Loterías y Apuestas del Estado" />
			<meta property="og:url" content="https://www.loteriasyapuestas.es//es/resultados/quiniela/" />
			
			<meta property="og:image:alt" content="" />
				<meta property="og:image" content="https://www.loteriasyapuestas.es//f/loterias/estaticos/imagenes/imagen_facebook_loterias.png" />
				<meta property="og:image:secure_url" content="https://www.loteriasyapuestas.es//f/loterias/estaticos/imagenes/imagen_facebook_loterias.png" />
				<link rel="shortcut icon" href="/f/loterias/favicon.ico" type="image/x-icon">
		
		<link href="/f/loterias/estaticos/css/sass/loterias_sass.css" type="text/css" rel="stylesheet">
		<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous">
    	<link href="/f/loterias/estaticos/css/promociones.css" type="text/css" rel="stylesheet">
		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
		<script src="/f/loterias/estaticos/js/cookie.js" type="text/javascript"></script>
    	<script src="https://cdnjs.cloudflare.com/ajax/libs/jQuery-JSONP/2.4.0/jquery.jsonp.min.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/3.1.0/mustache.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.js" type="text/javascript"></script>
<script src="/f/loterias/estaticos/js/functionsfront.js" type="text/javascript"></script>
	    <script>var isCantCatchMeActiveForUtilsJsonLnacJs=false;</script>
<script src="/f/loterias/estaticos/js/utils-json-lnac.js" type="text/javascript"></script>
		
		<script src="/f/loterias/estaticos/js/vapajaxlibrary.js" type="text/javascript"></script>
		<script>loadStaticFiles= false</script>
<script type="text/javascript" src="/vgn-ext-templating/scripts/async/ajax.jsp"></script>
<script>var urlPathPrefix="/f";</script>
		<script src="/f/loterias/estaticos/js/snippet.js" type="text/javascript"></script>
		</head>
	<body>
		<div class="cookies">
	<div class="contenidoCookies">
		<p class="tituloCookies">Uso de Cookies</p>
		<p>
			En las webs de SELAE utilizamos cookies tanto propias como de terceros para mejorar tu experiencia de usuario, realizar an&aacute;lisis estad&iacute;sticos y ofrecerte informaci&oacute;n de inter&eacute;s. Si contin&uacute;as navegando, entenderemos que aceptas su uso. Si necesitas m&aacute;s informaci&oacute;n o quieres saber c&oacute;mo rechazarlas o eliminarlas, haz clic <a href="https://www.loteriasyapuestas.es/es/paginas-informativas/politica-de-cookies-webs-juego-y-corporativa.info">aqu&iacute;</a>.</p>
		<div class="enlaceCookies">
			<a href="#">Aceptar Cookies</a>
		</div>
	</div>
</div><!-- Contenido -->
		<!-- begin horizontal nav area -->
		<!-- end horizontal nav area -->
		<!-- Start Page Controls - Horz Area -->

<!-- End Page Controls - Horz Area -->
<div class="portal-seccion-header" >

			    <script id='header-template-EMIL' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--euromillones' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--euromillones'>Euromillones</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/EuromillonesAJ.svg' alt='icono del juego'>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--euromillones'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--euromillones'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--euromillones'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-LAPR' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--primitiva' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--primitiva'>La Primitiva</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/PrimitivaAJ.svg' alt='icono del juego'>		
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--primitiva'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--primitiva'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--primitiva'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-BONO' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--bonoloto' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--bonoloto'>Bonoloto</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/BonolotoAJ.svg'>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--bonoloto'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--bonoloto'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--bonoloto'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-ELGR' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--gordo' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--gordo'>El Gordo</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/ElGordoAJ.svg' alt='{{altMsg}}'>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--gordo'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--gordo'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--gordo'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-LNAC' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--loteria-nacional' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--loteria-nacional'>Loter&iacute;a Nacional</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/LoteriaNacionalAJ.svg' alt='icono del juego'> 
		<span class='c-cabecera-juego__texto'>
		{{#if prize}}
			{{#if prize.isLnacSpecialPrize}}
				Premio especial al d&eacute;cimo
			{{else}}
				1er premio a la serie
			{{/if}}
		{{/if}}
		</span>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--loteria-nacional'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--loteria-nacional'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--loteria-nacional'>&#x20ac;</span>
				{{/if}}
				<span class="c-cabecera-juego__especial" id="qa_cabecera_sorteos_tipo_premio_LNAC">
					{{#if prize.isLnacSpecialPrize}}
						Premio especial al d&eacute;cimo
					{{else}}
						1er premio a la serie
					{{/if}}
				</span>
			{{/if}}
		</p>
	</a>
</script>
<script id='header-template-LAQU' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--quiniela' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--quiniela'>La Quiniela</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/LaQuinielaAJ.svg' alt='icono del juego'>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--quiniela'>	
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quiniela'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quiniela'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-LOTU' type='text/html'>	
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--lototurf' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--lototurf'>Lototurf</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/LototurfAJ.svg' alt='icono del juego'>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--lototurf'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--lototurf'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--lototurf'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-QGOL' type='text/html'>	
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--quinigol' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--quinigol'>Quinigol</p>
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/QuinigolAJ.svg' alt='icono del juego'>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--quinigol'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quinigol'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quinigol'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-QUPL' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace c-cabecera-juego__enlace--quintuple' title='{{betTitle}}'>
		<p class='c-cabecera-juego__titulo c-cabecera-juego__titulo--quintuple'>Qu&iacute;ntuple Plus</p> 
		<img class='c-cabecera-juego__imagen' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/QuintupleAJ.svg' alt='icono del juego'>
		<p class='c-cabecera-juego__bote c-cabecera-juego__bote--quintuple'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quintuple'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quintuple'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-EMIL' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--euromillones' title='{{betTitle}}'>
		<img class='c-cabecera-juego__imagen_topaz  c-cabecera-juego__imagen-euromillones esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_EuromillonesAJ_topaz.png' alt='Euromillones'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_EuromillonesAJ_mobile_topaz.png' alt='Euromillones'>
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote_topaz--euromillones c-cabecera-juego__bote--euromillones'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--euromillones'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--euromillones'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-LAPR' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--primitiva' title='{{betTitle}}'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_PrimitivaAJ_topaz.png' alt='primitiva'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_PrimitivaAJ_mobile_topaz.png' alt='primitiva'>     		
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote--primitiva'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--primitiva'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--primitiva'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-BONO' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--bonoloto' title='{{betTitle}}'>
  		<img class='c-cabecera-juego__imagen_topaz esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_BonolotoAJ_topaz.png' alt='bonoloto' >
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_BonolotoAJ_mobile_topaz.png' alt='bonoloto' >
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote--bonoloto'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--bonoloto'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--bonoloto'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-ELGR' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--gordo' title='{{betTitle}}'>
 		<img class='c-cabecera-juego__imagen_topaz c-cabecera-juego__imagen-elGordo esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_ElGordoAJ_topaz.png' alt='{{altMsg}}'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_ElGordoAJ_mobile_topaz.png' alt='{{altMsg}}'>            
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote_topaz--elgordo c-cabecera-juego__bote--gordo'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--gordo'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--gordo'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-LNAC' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--loteria-nacional' title='{{betTitle}}'>
		<img class='c-cabecera-juego__imagen_topaz esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_LoteriaNacionalAJ_topaz.png' alt='Loteria Nacional'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_LoteriaNacionalAJ_mobile_topaz.png' alt='Loteria Nacional'>
		<span class='c-cabecera-juego__texto_topaz'>
		{{#if prize}}
			{{#if prize.isLnacSpecialPrize}}
				Premio especial al d&eacute;cimo
			{{else}}
				1er premio a la serie
			{{/if}}
		{{/if}}
		</span>
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote_topaz--lnac c-cabecera-juego__bote--loteria-nacional'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--loteria-nacional'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--loteria-nacional'>&#x20ac;</span>
				{{/if}}
				<span class="c-cabecera-juego__especial_topaz esta-oculto-pc" id="qa_cabecera_sorteos_tipo_premio_LNAC">
					{{#if prize.isLnacSpecialPrize}}
						Premio especial al d&eacute;cimo
					{{else}}
						1er premio a la serie
					{{/if}}
				</span>
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-LAQU' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--quiniela' title='{{betTitle}}'>
		<img class='c-cabecera-juego__imagen_topaz esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_LaQuinielaAJ_topaz.png' alt='quiniela'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_LaQuinielaAJ_mobile_topaz.png' alt='quiniela'>       
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote--quiniela'>	
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quiniela'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quiniela'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-LOTU' type='text/html'>	
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--lototurf' title='{{betTitle}}'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_LototurfAJ_topaz.png' alt='lototurf'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_LototurfAJ_mobile_topaz.png' alt='lototurf'>
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote--lototurf'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--lototurf'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--lototurf'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-QGOL' type='text/html'>	
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--quinigol' title='{{betTitle}}'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_QuinigolAJ_topaz.png' alt='quinigol'>
        <img class='c-cabecera-juego__imagen_topaz esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_QuinigolAJ_mobile_topaz.png' alt='quinigol'>
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote--quinigol'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quinigol'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quinigol'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><script id='header-template-topaz-QUPL' type='text/html'>
	<a href='{{betLink}}' class='c-cabecera-juego__enlace_topaz c-cabecera-juego__enlace--quintuple' title='{{betTitle}}'>
		<img class='c-cabecera-juego__imagen_topaz c-cabecera-juego__imagen-quintuple esta-oculto-movil' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_QuintupleAJ_topaz.png' alt='quintuple'>
        <img class='c-cabecera-juego__imagen_topaz c-cabecera-juego__imagen-quintuple esta-oculto-pc' src='{{urlPathPrefix}}/loterias/estaticos/imagenes/topaz/cabecera_QuintupleAJ_mobile_topaz.png' alt='quintuple'>
		<p class='c-cabecera-juego__bote_topaz c-cabecera-juego__bote_topaz-quintuple c-cabecera-juego__bote--quintuple'>
			{{#if prize}}
				{{#if prize.isMillionsValue}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quintuple'>millones</span>
				{{else}}
					{{prize.formatedValue}}<span class='c-cabecera-juego__cantidad c-cabecera-juego__cantidad--quintuple'>&#x20ac;</span>
				{{/if}}
			{{/if}}
		</p>
	</a>
</script><!-- Topaz Activation -->
<script type='text/javascript'>
	var timeToGetJsonpSaga = "180000";
	var hostReferrerSaga = "juegos.loteriasyapuestas.es";
	var isNewDesignInOldApplied = "true";
	var isTopazEnabledHeader = "true";
</script>

<script type="text/javascript">var jqHeader = jQuery.noConflict();
var urlPathPrefix;
var drawsData;

jqHeader(document).ready(function() {
  var jsonServiceUrl = jqHeader('#header-main').data('json-service-url');
  var currentLanguage = jQuery('#header-main').data('current-language');
  urlPathPrefix = jqHeader('#header-main').data('url-path-prefix');
  
  jqHeader.getJSON('//' + window.location.host + jsonServiceUrl, function(data) {
    if (data) {
      drawsData = data;
    } else {
      console.debug('ERROR: no se han cargado los datos actualizados para los sorteos de la cabecera');
    }
  }).fail(function(jqxhr, textStatus, error) {
    var err = textStatus + ', ' + error;
    console.log('Request Failed: ' + err);
  }).always(function(data){
    buildHeader(currentLanguage);
    hamburguerMenuToggle();
  }); 
});


function hamburguerMenuToggle(){
	if(isMobileByWidth()){
		jqHeader('#qa_cabecera_sorteos_contenedor').hide();
		dropDownMenu('qa_cabecera_menu__hamburguesa', 'qa_cabecera_sorteos_contenedor');
	}else{
		jqHeader('#qa_cabecera_sorteos_contenedor > li[id*=header-link-]').show();
	}
}

function buildHeader(currentLanguage) {
  jqHeader('[id^="header-link-"]').each(function() {
  
    var gameCode = jqHeader(this).attr('id').split('header-link-')[1];
    var betLink = jqHeader(this).data('bet-href');
    var betTitle = jqHeader(this).data('bet-title');

    var prize = extractPrize(gameCode, currentLanguage);
  
    var context = {
      urlPathPrefix:    urlPathPrefix,
      betLink:          betLink,
      betTitle:         betTitle,
      prize:            prize
    };

    var template = "";
    if (isTopazEnabledHeader === "true"){
    	template = Handlebars.compile(jqHeader('#header-template-topaz-' + gameCode).html());
    }else{
    	template = Handlebars.compile(jqHeader('#header-template-' + gameCode).html());
    }
  
    
  
    jqHeader('#header-link-' + gameCode).html(template(context));
  });
}

function extractPrize(gameCode, currentLanguage) {
  var draws = [];
  var prize;
  if (drawsData !== undefined && drawsData !== null && drawsData.length > 0) {
      for (var index = 0; index < drawsData.length; index++) {
          if (drawsData[index].game_id === gameCode) {
              draws.push(drawsData[index]);
          }
      }
      var drawsLength = draws.length;
      if (drawsLength > 0) {
          if (drawsLength > 1) {
              draws.sort(function(a, b) {
                  return (new Date(a.fecha.replace(/-/g, '/'))).getTime() - (new Date(b.fecha.replace(/-/g, '/'))).getTime();
              });
          }
          
          if (draws[0].estado === 'abierto' && (draws[0].premio_bote !== undefined  && draws[0].premio_bote !== null) && (draws[0].fecha !== undefined && draws[0].fecha !== null) && gameCode !== 'LNAC') {
              prize = formatHighlightedCurrency(gameCode, draws[0].premio_bote, currentLanguage, draws[0].id_sorteo);
          } else if (draws[0].estado === 'abierto' && (draws[0].premio_especial !== undefined  && draws[0].premio_especial !== null) && (draws[0].fecha !== undefined && draws[0].fecha !== null)) {
              prize = formatHighlightedCurrency(gameCode, draws[0].premio_especial, currentLanguage, draws[0].id_sorteo);
              prize.isLnacSpecialPrize = true;
          } else if (draws[0].estado === 'abierto' && (draws[0].primer_premio !== undefined  && draws[0].primer_premio !== null) && (draws[0].fecha !== undefined && draws[0].fecha !== null)) {
              prize = formatHighlightedCurrency(gameCode, draws[0].primer_premio, currentLanguage, draws[0].id_sorteo);
          } else if (drawsLength > 1 && draws[1].estado === 'abierto' && (draws[1].premio_bote !== undefined && draws[1].premio_bote !== null) && (draws[1].fecha !== undefined && draws[1].fecha !== null) && gameCode !== 'LNAC') {
              prize = formatHighlightedCurrency(gameCode, draws[1].premio_bote, currentLanguage, draws[1].id_sorteo);
          } else if (drawsLength > 1 && draws[1].estado === 'abierto' && (draws[1].premio_especial !== undefined && draws[1].premio_especial !== null) && (draws[1].fecha !== undefined && draws[1].fecha !== null)) {
              prize = formatHighlightedCurrency(gameCode, draws[1].premio_especial, currentLanguage, draws[1].id_sorteo);
              prize.isLnacSpecialPrize = true;
          } else if (drawsLength > 1 && draws[1].estado === 'abierto' && (draws[1].primer_premio !== undefined && draws[1].primer_premio !== null) && (draws[1].fecha !== undefined && draws[1].fecha !== null)) {
              prize = formatHighlightedCurrency(gameCode, draws[1].primer_premio, currentLanguage, draws[1].id_sorteo);
          }        
      } 
  }
  
  return prize;
}

function formatHighlightedCurrency(gameCode, value, currentLanguage, drawId) {
  var prize = {};
  var isEnglish = 'EN' == currentLanguage || 'en' == currentLanguage; 
  if (Math.abs(Number(value)) >= 1010000) {
      var formatedValue = Number(value) / 1.0e+6;
      var re = new RegExp('^-?\\d+(?:\.\\d{0,2})?');
      formatedValue = formatedValue.toString().match(re)[0];
      if(!isEnglish){
          formatedValue = Number(formatedValue).toLocaleString("es-ES");
      } else {
        formatedValue = Number(formatedValue).toLocaleString("en-EN");
      }
      prize.formatedValue = formatedValue; 
      prize.isMillionsValue = true;
    } else {
      prize.formatedValue = formatThousandsNumber(value, isEnglish);
      prize.isMillionsValue = false;
      if(value > 9999) {
          prize.moreThanFourDigits = true;
      } else {
          prize.moreThanFourDigits = false;
      }
    }
  
    return prize;
}

function formatThousandsNumber(value, isEnglish) {
  var number = parseFloat(value);
  var roundNumber = null;
  if (number != null && number != undefined && !isNaN(number)) {
      if(!isEnglish){
        roundNumber = parseFloat(number).toLocaleString("es-ES");
      } else {
        roundNumber = parseFloat(number).toLocaleString("en-EN");
      }
  }
  return roundNumber;
}

function addCurrentURLParamsToLanguageLinks() {
  jqHeader("div.language a").each(function() {
    var _href = jqHeader(this).attr("href");
    try {
      var indexParam = _href.indexOf("?");
      if (indexParam > -1) {
        var urlSplit = _href.split("?");
        jqHeader(this).attr("href", urlSplit[0] + document.location.search + "&" + urlSplit[1]);
      } else {
        jqHeader(this).attr("href", _href + document.location.search);
      }
    } catch (error) {
      jqHeader(this).attr("href", _href + document.location.search);
    }
  });
}


function isMobileByWidth() {
	return (getWidth() < 601);
}

function dropDownMenu(buttonId, menuId) {
  jqHeader('#' + buttonId).click(function() {
	  if(jqHeader('#'+ menuId).is(':visible')){
		  jqHeader('#' + menuId + " > li").slideToggle("slow");
		  jqHeader('#' + menuId ).slideToggle("slow");
	  }else{
		  jqHeader('#' + menuId ).slideToggle("slow");
		  jqHeader('#' + menuId + " > li").slideToggle("slow");  
	  }
	  toogleMenu(menuId);
  });
}


function toogleMenu(menuId){
	if(jqHeader('#'+menuId).css('display') == 'block' && menuId ==='helloMenu'){
		jqHeader('#lotobolsaMenu').hide();
		if(isMobileByWidth()){
			jqHeader('#qa_cabecera_sorteos_contenedor').children().hide();
			jqHeader('#qa_cabecera_sorteos_contenedor').hide();
		}
	}else if(jqHeader('#'+menuId).css('display') == 'block' && menuId ==='lotobolsaMenu'){
		jqHeader('#helloMenu').hide();
		if(isMobileByWidth()){
			jqHeader('#qa_cabecera_sorteos_contenedor').children().hide();
			jqHeader('#qa_cabecera_sorteos_contenedor').hide();
		}
	}else if(jqHeader('#qa_cabecera_sorteos_contenedor').css('height') !== "0px" && menuId ==='qa_cabecera_sorteos_contenedor'){
		jqHeader('#helloMenu').hide();
		jqHeader('#lotobolsaMenu').hide();
		jqHeader('#mobileForm').hide();
	}
}

</script>
<script type="text/javascript">	var jqHeader = jQuery.noConflict();
var disableLoginSales = false;

if(typeof console!="undefined" && typeof console.debug=="undefined"){
  console.debug = console.log;
}


function bindEventJustOnce(elementIdentifier, eventName, eventFunction) {
  jqHeader(elementIdentifier).unbind(eventName, eventFunction);
  jqHeader(elementIdentifier).bind(eventName, eventFunction);
}

function esPageHomeAndLNAC() {
	var pathUrl;
	var resultado = false;
	var indiceBarra = location.pathname.indexOf("/");
	var indiceLNAC = location.pathname.indexOf("/loteria-nacional");
	if (indiceLNAC === -1) {
		indiceLNAC = location.pathname.indexOf("/loteria%2Dnacional");
	}
	if (indiceBarra >= 0) {
		pathUrl = location.pathname.substr(indiceBarra + 1).split('/');
		if (pathUrl != null){
			if(pathUrl.length == 1){
				resultado = true;
			} else  if (pathUrl.length == 2) {
				if(pathUrl[0] == "loterias" || pathUrl[1] == ""){
					resultado = true;
				}
			}
		}
	}
	if (indiceLNAC >= 0) {
		pathUrl = location.pathname.substr(1, indiceLNAC-1).split('/');
		if ((pathUrl != null) && ((pathUrl.length == 1) || (pathUrl.length == 2 && pathUrl[0] == "loterias"))) {
			resultado = true;
		}
		
		
		if (pathUrl != null && pathUrl.length >= 1){
			if(pathUrl[0] == "loterias") {
				resultado = pathUrl.length == 2 || (pathUrl.length >= 3 && pathUrl[2] == "resultados");
			} else {
				resultado = pathUrl.length == 1 || (pathUrl.length >= 2 && pathUrl[1] == "resultados");
			}
			
			if(pathUrl.length == 1){
				resultado = true;
			} else  if (pathUrl.length == 2) {
				if(pathUrl[0] == "loterias" || pathUrl[1] == ""){
					resultado = true;
				}
			}
		}
	}
	return resultado;
}

function esCelebrationNavidadONinio() {
  var resultado = false;
  if (estadoCelebracionLNACGlobalJSON != null) {
    var estadoCelebracionLNAC = estadoCelebracionLNACGlobalJSON.estadoCelebracionLNAC;
    if (estadoCelebracionLNAC) {
      var drawIdCelebration = estadoCelebracionLNACGlobalJSON.sorteoEnCelebracionLNAC["drawId"];
      var drawIdNavidad = estadoCelebracionLNACGlobalJSON.sorteoEnCelebracionLNAC["drawIdNavidad"];
      var drawIdNinyo = estadoCelebracionLNACGlobalJSON.sorteoEnCelebracionLNAC["drawIdNinyo"];
      if ((drawIdCelebration == drawIdNavidad) || (drawIdCelebration == drawIdNinyo)) {
        resultado = true;
      }
    }
  }
  return resultado;
}


function formatPositiveQuantityOfMoney(numberWith2DecimalsString, lang) {
  var decimalSeparator = (lang && lang === 'en') ? '.' : ',';
  var milesSeparator = (lang && lang === 'en') ? ',' : '.';
  if (numberWith2DecimalsString == null || numberWith2DecimalsString == undefined)
    return '';
  if (isNaN(numberWith2DecimalsString))
    return '';
  if (numberWith2DecimalsString.length < 3) {
    for (var i = 0; i < 3 - numberWith2DecimalsString.length + 1; i++) {
      numberWith2DecimalsString = '0' + numberWith2DecimalsString;
    }
  }
  var integral = numberWith2DecimalsString.substr(0, numberWith2DecimalsString.length - 2);
  integral = integral.replace(/\B(?=(\d{3})+(?!\d))/g, milesSeparator);
  var decimal = numberWith2DecimalsString.substr(numberWith2DecimalsString.length - 2, numberWith2DecimalsString.length);
  return integral + decimalSeparator + decimal;
}


/**
 * Remove the <li> elements with banners out of date
 */
function removeBannersOutOfDate() {
  var activation;
  var deactivation;
  var cont = 0;
  var actualDate = new Date();
  actualDate.setSeconds(0);
  actualDate.setMilliseconds(0);

  jqHeader('li.item-banner').each(function(i, e) {
    var activationStr = jqHeader(e).attr('data-activation');
    var deactivationStr = jqHeader(e).attr('data-deactivation');
    var remove = false;

    if (activationStr && !deactivationStr && !remove) {
      activation = createDateFromString(activationStr);
      if (activation > actualDate) {
        jqHeader(e).remove();
        console.debug('Element: ' + jqHeader(e).attr('id') + ' - REMOVE');
        remove = true;
      }
    }
    if (!activationStr && deactivationStr && !remove) {
      deactivation = createDateFromString(deactivationStr);
      if (deactivation < actualDate) {
        jqHeader(e).remove();
        console.debug('Element: ' + jqHeader(e).attr('id') + ' - REMOVE');
        remove = true;
      }
    }
    if (activationStr && deactivationStr && !remove) {
      activation = createDateFromString(activationStr);
      deactivation = createDateFromString(deactivationStr);
      if (!(activation <= actualDate && deactivation >= actualDate)) {
        jqHeader(e).remove();
        console.debug('Element: ' + jqHeader(e).attr('id') + ' - REMOVE');
        remove = true;
      }
    }
    if (!remove) {
      console.debug('Element: ' + jqHeader(e).attr('id') + ' - OK');
      cont++;
    }
  });
  return cont;
}


/**
 * 
 * @param str
 * @returns {Date}
 */
function createDateFromString(str) {
  try {
    if (str) {
      if (new Date(str).getTime()) {
        return (new Date(str));
      } else {
        var dateSrt = str.split(' ')[0] + 'T' + str.split(' ')[1];
        return (new Date(dateSrt));
      }
    } else {
      return null;
    }
  } catch (err) {
    console.error('ERROR en createDateFromString: ' + err);
    return null;
  }
}


/**
 * Set up <b>src</b> in all elements indicated in 'selector' attribute
 * It is necessary for the home banner carousel
 * @param selector jQuery selector
 */
function setUpSrcImg(selector) {
  jqHeader(selector).each(function(i, e) {
    var srcPC = jqHeader(e).attr('data-src-pc');
    var srcTablet = jqHeader(e).attr('data-src-tablet');
    var srcMobile = jqHeader(e).attr('data-src-mobile');

    if (!srcPC) {
      console.debug('- No tenemos imagen de PC!!');
      return false;
    } else {
      if (isPCForImg()) { // PC
        jqHeader(e).attr('src', srcPC);
        console.debug('--Elto: ' + i + ' --> actualizamos a srcPC');
      } else {
        if (isTabletForImg()) { // Tablet
          if (srcTablet) {
            jqHeader(e).attr('src', srcTablet);
            console.debug('--Elto: ' + i + ' --> actualizamos a srcTablet');
          } else {
            jqHeader(e).attr('src', srcPC);
            console.debug('--Elto: ' + i + ' --> actualizamos a srcPC');
          }
        } else { // Mobile
          if (!srcMobile) {
            if (srcTablet) {
              jqHeader(e).attr('src', srcTablet);
              console.debug('--Elto: ' + i + ' --> actualizamos a srcTablet');
            } else {
              jqHeader(e).attr('src', srcPC);
              console.debug('--Elto: ' + i + ' --> actualizamos a srcPC');
            }
          } else {
            jqHeader(e).attr('src', srcMobile);
            console.debug('--Elto: ' + i + ' --> actualizamos a srcMolvil');
          }
        }
      }
    }
  });
}


function jsonpCallback(data) {
  //console.log("callback",data);
  // do nothing
}


function successfulCallSagaMenuMessagesJSONService(data) {
  var i;
  if (data.avisos != null && data.avisos.length > 0){
    for (i = 0; i < data.avisos.length; i++) {
      var element = data.avisos[i];
      var indiceMenu = element.indiceMenu;
      var indiceSubmenu = element.indiceSubmenu;
      var numAvisos = element.numAvisos;
      if (numAvisos > 0) {
        if (indiceMenu == 1 && indiceSubmenu == 0) {
          jqHeader(".c-cabecera-menu__counter").show();
          jqHeader(".c-cabecera-menu__counter").html(numAvisos);
        } else {
          var html = "<span class='c-cabecera-menu__notificaciones'>" + numAvisos + "</span>";
          if ( jqHeader("#qa_cabecera_menu_usuario_" + indiceMenu + indiceSubmenu + " a").length ) {
            jqHeader("#qa_cabecera_menu_usuario_" + indiceMenu + indiceSubmenu + " a").append(html);
          } else {
            jqHeader("#qa_cabecera_menu_usuario_" + indiceMenu + indiceSubmenu).append(html);
          }
          
        }
      }else{
    	  if (indiceMenu == 1) {
    		  jqHeader(".c-cabecera-menu__counter").hide();  
    	  }
    	  
      }
    }
  }
}


function callSagaMenuMessagesJSONService(sagaMenuMsgsJsonSvcUrl) {
  try {
    var url = sagaMenuMsgsJsonSvcUrl.indexOf(":") == -1 ? "https://" + sagaMenuMsgsJsonSvcUrl : sagaMenuMsgsJsonSvcUrl;
    jqHeader.jsonp({
      url : url,
      callback : "jsonpCallback",
      success : function(data) {
    	setJsonNotificationsInLocalStorage(JSON.stringify(data)); //set jsonP Notifications in localStorage
        successfulCallSagaMenuMessagesJSONService(data);
      },
      error : function(d, msg) {
        console.log("Saga menu messages service request failed. URL used was '" + sagaMenuJsonSvcUrl + "'.");
      }
    });
  } catch (e) {
    console.log('ERROR while calling Saga menu messages service and parsing its data: ' + e);
  }
}


function getDateLastLogin(lastLogin){
  var date = "";
  if (lastLogin != null && lastLogin != undefined){
    date= lastLogin.substring(0,lastLogin.lastIndexOf('-'));
  }
  return date;
}


function getHourLastLogin(lastLogin){
  var hour = "";
  if (lastLogin != null && lastLogin != undefined){
    hour= lastLogin.substring(lastLogin.lastIndexOf('-')+1,lastLogin.lastIndexOf(':'));
  }
  return hour;
}


function setSimpleClock(horaPlataforma) {
  try {
    console.log("setSimpleClock > horaPlataforma = " + horaPlataforma);
    var date = new Date(); // some mock date
    var sec = date.getSeconds();
    var ms = date.getMilliseconds();
    var plataformDate = horaPlataforma.split(":");
    var hour = parseInt(plataformDate[0]);
    var min = parseInt(plataformDate[1]);

    var datePlataform = new Date(date.getFullYear(), date.getMonth(), date.getDay(), hour, min, sec, ms);
    var horaPlataformaMillis = datePlataform.getTime();

    var clock = this;
    var hour;
    var minute;
    var segundos = 0;

    function getTime() {
      horaPlataformaMillis = horaPlataformaMillis + 1;
      var date = new Date(horaPlataformaMillis)
      hour = date.getHours();
      minute = date.getMinutes();
      return {
        date : date.getDate(),
        hour : hour,
        minute : date.getMinutes()
      };
    }

    function appendZero(num) {
      if (num < 10) {
        return "0" + num;
      }
      return num;
    }

    function refreshTime() {
      segundos++;
      if (segundos == 60) {
        segundos = 0;
        if (minute == 59) {
          minute = 0;
          if (hour == 59)
            hour = 0;
          else
            hour++;
        } else {
          minute++;
        }

        clock = jqHeader.find('#timePC');
        jqHeader(clock).html(appendZero(hour) + ":" + appendZero(minute));
      }
    }
    var now = getTime(horaPlataformaMillis);
    clock = jqHeader.find('#timePC');
    jqHeader(clock).html(appendZero(now.hour) + ":" + appendZero(now.minute));
    setInterval(function() {
      refreshTime()
    }, 1000);

  } catch (error) {
    console.log("Error > header-saga.js > setSimpleClock " + error.message);
  }
}


function setJsonNotificationsInLocalStorage(cachedNotificationsJSONp){
	localStorage.setItem('cachedNotificationsJSONp', cachedNotificationsJSONp);	
}


function getJsonNotificationsFromLocalStorage(){
	return JSON.parse(localStorage.getItem('cachedNotificationsJSONp'));	
}


function setCurrentTimeNotificationsInLocalStorage(){
	var cachedTimeStampNotificationsLS = getCurrentTime();
	localStorage.setItem('cachedTimeStampNotificationsLS', cachedTimeStampNotificationsLS);	
}


function getCurrentTimeNotificationsFromLocalStorage(){
	return localStorage.getItem('cachedTimeStampNotificationsLS');
}


function loadLogedSagaMenu(data, sagaMenuMsgsJsonSvcUrl) {
  if (data.loginPrevio != null) {
	    jqHeader("#datePC").html(getDateLastLogin(data.loginPrevio));
	    jqHeader("#hourPC").html(" - "+getHourLastLogin(data.loginPrevio)+"h.");
	    if(isNewDesignInOldApplied !== null && isNewDesignInOldApplied !== undefined && isNewDesignInOldApplied){
	    	jqHeader("#menuNoLoggedInSaga").css("display", "none");
	    }
	  }
	  if (data.saldoLotobolsa != null && data.saldoLotobolsa >= 0) {
	    var balance = formatPositiveQuantityOfMoney('' + data.saldoLotobolsa)+'\u20AC';
	      jqHeader("#balancePC").html(balance);
	      jqHeader("#balanceMobile").html(balance);
	  }
	  if (/^(([01]?[0-9]|2[0-3]):[0-5][0-9])$/.test(data.horaPlataforma)) {
	    jqHeader("#timePC").html(data.horaPlataforma);
	    setSimpleClock(data.horaPlataforma);
	  }
	  if(data.nombreUsuario != null && data.nombreUsuario !=""){
	    jqHeader("#lotobolsaName").html(data.nombreUsuario);
	  }
	  if(isActiveSagaMenuMessagesJsonService == "true"){
		 var millisecondsCurrentTimeLS = getCurrentTimeNotificationsFromLocalStorage();
	  	 var jsonNotificationsSaga = getJsonNotificationsFromLocalStorage();
	  	 var millisecondsCurrentTime = getCurrentTime();
	  	if ((isSagaJuegosReferrer() || (jsonNotificationsSaga === undefined) || (jsonNotificationsSaga === null) || (millisecondsCurrentTimeLS === undefined) ||
	  			(millisecondsCurrentTimeLS === null) || (millisecondsCurrentTime !== null && (millisecondsCurrentTime - millisecondsCurrentTimeLS)) >= timeToGetJsonpSaga)){
	  		  setCurrentTimeNotificationsInLocalStorage();
	  		  callSagaMenuMessagesJSONService(sagaMenuMsgsJsonSvcUrl);
	  	  }else{
	  		var dataNotificationsLS = getJsonNotificationsFromLocalStorage(); //get json Avisos from localStorage
	  		successfulCallSagaMenuMessagesJSONService(dataNotificationsLS);
		  }
	  } else {
	    if (data.mensajesNoLeidos != null && data.mensajesNoLeidos > 0) {
	      jqHeader(".c-cabecera-menu__counter").show();
	      jqHeader(".c-cabecera-menu__counter").html(data.mensajesNoLeidos);
	    }else{
	      jqHeader(".c-cabecera-menu__counter").hide();
	    }
	  }
}


function disableElementsWhenSagaNeeds(){
  jqHeader(".c-login-movil__datos").hide();
  jqHeader(".c-login-movil__texto").hide();
  jqHeader(".c-login-movil__enlace-solicita").hide();
  jqHeader("#tbUsu").hide();
  jqHeader("#tbPass").hide();
  jqHeader("#messagesForgetPassword").hide();
  jqHeader('#lotoBolsaPC').addClass('esta-oculto');
  jqHeader("#registerButton").prop( "disabled", true );
  jqHeader("#enterButton").prop( "disabled", true );
  jqHeader("#registerButtonMobile").prop( "disabled", true );
  jqHeader("#enterButtonMobile").prop( "disabled", true );
}


function updateElementsWhenCaptchaIsTrue(){
  jqHeader(".c-login-movil__datos").hide();
  jqHeader(".c-login-movil__texto").hide();
  jqHeader(".c-login-movil__enlace-solicita").hide();
  jqHeader("#tbUsu").hide();
  jqHeader("#tbPass").hide();
  jqHeader("#messagesForgetPassword").hide();
  jqHeader('#lotoBolsaPC').addClass('esta-oculto');
  jqHeader("#registerButton").prop( "disabled", false );
  jqHeader("#enterButton").prop( "disabled", false );
  jqHeader("#registerButtonMobile").prop( "disabled", false );
  jqHeader("#enterButtonMobile").prop( "disabled", false );
}


function enableElementsWhenSagaNeeds(){
  jqHeader(".c-login-movil__datos").show();
  jqHeader(".c-login-movil__texto").show();
  jqHeader(".c-login-movil__enlace-solicita").show();
  jqHeader("#tbUsu").show();
  jqHeader("#tbPass").show();
  jqHeader("#messagesForgetPassword").show();
  jqHeader('#lotoBolsaPC').removeClass('esta-oculto');
  jqHeader("#registerButton").prop( "disabled", false );
  jqHeader("#enterButton").prop( "disabled", false );
  jqHeader("#registerButtonMobile").prop( "disabled", false );
  jqHeader("#enterButtonMobile").prop( "disabled", false );
}

function updateElementsWhenSalesAreDisabled(){
  jqHeader(".c-login-movil__datos").hide();
  jqHeader(".c-login-movil__texto").hide();
  jqHeader(".c-login-movil__enlace-solicita").hide();
  jqHeader("#tbUsu").hide();
  jqHeader("#tbPass").hide();
  jqHeader("#messagesForgetPassword").hide();
  jqHeader('#lotoBolsaPC').addClass('esta-oculto');
  jqHeader("#registerButton").prop( "disabled", false );
  jqHeader("#enterButton").prop( "disabled", false );
  jqHeader("#registerButtonMobile").prop( "disabled", false );
  jqHeader("#enterButtonMobile").prop( "disabled", false );
  jqHeader('#enterButton').replaceWith('<a href=\"'+ loginEnterButtonUrl +'\" id="enterButton" class="c-cabecera-menu__enlace" title="Entrar"><img class="c-cabecera-menu__imagen" src="/f/loterias/estaticos/imagenes/sass/boton_entrar.svg" alt=\"'+ literalEnter +'\"><p class="c-cabecera-menu__texto">'+ literalEnter +'</p></a>');
  jqHeader('#enterButtonMobile').replaceWith('<a href=\"'+ loginEnterButtonUrl +'\" id="enterButtonMobile" type="submit" class="c-login-movil__boton-blanco">'+ literalMobileEnter +'</a>');
  jqHeader('#registerButtonMobile').replaceWith('<a href=\"'+ registerButtonURLMobile +'\" id="registerButtonMobile" class="c-login-movil__boton-azul">'+ literalMobileRegister +'</a>');
}





function successfulCallSagaMenuJSONService(data, sagaMenuMsgsJsonSvcUrl, status) {
    loadSagaMenu(data, sagaMenuMsgsJsonSvcUrl, status);
}


function getCurrentTime(){
	var time=new Date();
	return time.getTime();
}


function setCurrentTimeInLocalStorage(){
	var cachedTimeStampLS = getCurrentTime();
	localStorage.setItem('cachedTimeStampLS', cachedTimeStampLS);	
}


function getCurrentTimeFromLocalStorage(){
	return localStorage.getItem('cachedTimeStampLS');
}


function setJsonPInLocalStorage(cachedJSONp){
	localStorage.setItem('cachedJSONp', cachedJSONp);	
}

/**
 * Removing objects from localStorage
 */
function clearLocalStorage(){
  localStorage.removeItem('cachedJSONp');
  localStorage.removeItem('cachedTimeStampLS');
}

function getJsonPFromLocalStorage(){
	return JSON.parse(localStorage.getItem('cachedJSONp'));	
}


function isSagaJuegosReferrer(){
	var sagaReferrer = document.referrer.split('/')[2];
	if(sagaReferrer !== null && sagaReferrer !== undefined && hostReferrerSaga === sagaReferrer){
		return true;
	}else{
		return false;
	}
}


function callSagaJSONService(url,sagaMenuMsgsJsonSvcUrl,sagaMenuJsonSvcUrl,errorData){
    jqHeader.ajaxSetup({
    	xhrFields: {
    		withCredentials: true
    	}
    });
	jqHeader.getJSON(url, function(data) {
		setJsonPInLocalStorage(JSON.stringify(data)); //set jsonP in localStorage	
		successfulCallSagaMenuJSONService(data, sagaMenuMsgsJsonSvcUrl, '200');
	}).fail(function(jqxhr, textStatus, errorThrown) {
		console.error("Saga menu service request failed. URL used was '" + sagaMenuJsonSvcUrl + "'.");
    clearLocalStorage();
		successfulCallSagaMenuJSONService(jqxhr.responseJSON, sagaMenuMsgsJsonSvcUrl, jqxhr.status);
	});
}

function loadSagaMenu(data, sagaMenuMsgsJsonSvcUrl, status) {
	jqHeader("#sagaIsDown").hide();
	jqHeader('.c-cabecera').addClass('logado');
	enableElementsWhenSagaNeeds();

	if (status != null && status == '200' && data != null) {
		if (data.estadoPlataforma == 'CERRADA'){
			jqHeader('.c-cabecera').removeClass('logado');
	      	disableElementsWhenSagaNeeds();
	      	jqHeader("#sagaIsClosed").show();
	      	if(isNewDesignInOldApplied !== null && isNewDesignInOldApplied !== undefined && isNewDesignInOldApplied){
	    	  jqHeader("#menuLoggedInSaga").css("display", "none");  
	      	}
		} else if (data.estadoPlataforma == 'ABIERTA') {
			if (data.participanteID != '' && data.loginPrevio != '-' && data.participanteID != 'ERROR' && data.loginPrevio != 'ERROR') {
				loadLogedSagaMenu(data, sagaMenuMsgsJsonSvcUrl);
			} else if (data.participanteID != 'ERROR' && data.loginPrevio != 'ERROR') {
				jqHeader("#actualURL").attr('value', window.location.href);
		      	jqHeader("#actualURLMobile").attr('value', window.location.href);
		     	jqHeader('.c-cabecera').removeClass('logado');
		      	enableElementsWhenSagaNeeds();
		      	jqHeader('#lotoBolsaPC').addClass('esta-oculto');
		      	if(isNewDesignInOldApplied !== null && isNewDesignInOldApplied !== undefined && isNewDesignInOldApplied){
		    	  jqHeader("#menuLoggedInSaga").css("display", "none"); 
		      	}
			} else {
				jqHeader('.c-cabecera').removeClass('logado');
		    	disableElementsWhenSagaNeeds();
		    	jqHeader("#sagaIsDown").show();
			}
		}
	} else  {
		if (status == '403' && data.filtroErrorNombre != null && data.filtroErrorNombre == 'plataformaCerrada') {
			jqHeader('.c-cabecera').removeClass('logado');
			disableElementsWhenSagaNeeds();
			jqHeader("#sagaIsClosed").show();
			if(isNewDesignInOldApplied !== null && isNewDesignInOldApplied !== undefined && isNewDesignInOldApplied){
			   	jqHeader("#menuLoggedInSaga").css("display", "none");  
			}
		} else {
			jqHeader('.c-cabecera').removeClass('logado');
	    	disableElementsWhenSagaNeeds();
	    	jqHeader("#sagaIsDown").show();
		}
	}
}

function callSagaMenuJSONService(sagaMenuJsonSvcUrl, sagaMenuMsgsJsonSvcUrl) {
  if (sagaMenuJsonSvcUrl != null && sagaMenuJsonSvcUrl != undefined && sagaMenuJsonSvcUrl != "") {
    var errorText = '{"estadoPlataforma":"ABIERTA","saldoLotobolsa":"ERROR","horaPlataforma":"null",' 
    	+'"loginPrevio":"ERROR","participanteID":"ERROR","mostrarCaptcha":false,"mensajesNoLeidos":null}';
    var errorData = JSON.parse(errorText);
    try {
	      var url = sagaMenuJsonSvcUrl.indexOf(":") == -1 ? "https://" + sagaMenuJsonSvcUrl : sagaMenuJsonSvcUrl;
	      var millisecondsCurrentTimeLS = getCurrentTimeFromLocalStorage();
	  	  var jsonPSaga = getJsonPFromLocalStorage();
	  	  var millisecondsCurrentTime = getCurrentTime();
	  	  if ((isSagaJuegosReferrer() || (jsonPSaga === undefined) || (jsonPSaga === null) || (millisecondsCurrentTimeLS === undefined) ||
	  			(millisecondsCurrentTimeLS === null) || (millisecondsCurrentTime !== null && (millisecondsCurrentTime - millisecondsCurrentTimeLS)) >= timeToGetJsonpSaga)){
	  		  setCurrentTimeInLocalStorage();
	  		  callSagaJSONService(url,sagaMenuMsgsJsonSvcUrl,sagaMenuJsonSvcUrl,errorData);
	  	  }else{
	  		var dataLS = getJsonPFromLocalStorage(); //get jsonP from localStorage
	  		successfulCallSagaMenuJSONService(dataLS, sagaMenuMsgsJsonSvcUrl, '200');
		  }
    } catch (e) {
      console.error('ERROR while calling Saga menu service and parsing its data: ' + e);
      successfulCallSagaMenuJSONService(errorData, sagaMenuMsgsJsonSvcUrl);
      if(isNewDesignInOldApplied !== null && isNewDesignInOldApplied !== undefined && isNewDesignInOldApplied){
    	  jqHeader("#menuLoggedInSaga").css("display", "none");
      }
    }
  }
}


function shouldLoadSagaMenu(sagaMenuJsonSvcUrl, sagaMenuMsgsJsonSvcUrl) {
  jqHeader.when(isConfiguracionLNACGlobalJSON, isEstadoCelebracionLNACGlobalJSON).then(function() {
    var fechaUsuario = new Date().getTime();
    var desactivarLoginVentas = false;
    var fechaInicioNavidad = new Date(configuracionLNACGlobalJSON.sorteoExtraordinarioNavidad.fechaInicio).getTime();
    var fechaFinNavidad = new Date(configuracionLNACGlobalJSON.sorteoExtraordinarioNavidad.fechaFin).getTime();
    var fechaInicioNinno = new Date(configuracionLNACGlobalJSON.sorteoExtraordinarioNinno.fechaInicio).getTime();
    var fechaFinNinno = new Date(configuracionLNACGlobalJSON.sorteoExtraordinarioNinno.fechaFin).getTime();
    var fechaIniciodesactivarLoginVentas = null;
    var fechaFindesactivarLoginVentas = null;
    if (configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaInicio != null) {
      fechaIniciodesactivarLoginVentas = new Date(configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaInicio).getTime();
    }
    if (configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaFin != null) {
      fechaFindesactivarLoginVentas = new Date(configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaFin).getTime();
    }
    if (!desactivarLoginVentas 
        && (configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaInicio != null) 
        && (configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaInicio != '') 
        && (fechaUsuario >= fechaIniciodesactivarLoginVentas)) {
      if ((configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaFin == null) 
          || (configuracionLNACGlobalJSON.desactivacionLoginVentas.fechaFin == '') 
          || (fechaFindesactivarLoginVentas >= fechaUsuario)) {
        desactivarLoginVentas = true;
      }
    }
    if ((configuracionLNACGlobalJSON.sorteoExtraordinarioNavidad.fechaInicio != null) 
        && (configuracionLNACGlobalJSON.sorteoExtraordinarioNavidad.fechaInicio != '') 
        && (fechaUsuario >= fechaInicioNavidad)) {
      if ((configuracionLNACGlobalJSON.sorteoExtraordinarioNavidad.fechaFin == null) 
          || (configuracionLNACGlobalJSON.sorteoExtraordinarioNavidad.fechaFin == '') 
          || (fechaFinNavidad >= fechaUsuario)) {
        if (esPageHomeAndLNAC()) {
          desactivarLoginVentas = true;
        }
      }
    }
    if (esPageHomeAndLNAC()){
      if (!desactivarLoginVentas 
          && (configuracionLNACGlobalJSON.sorteoExtraordinarioNinno.fechaInicio != null) 
          && (configuracionLNACGlobalJSON.sorteoExtraordinarioNinno.fechaInicio != '') 
          && (fechaUsuario >= fechaInicioNinno)) {
        if ((configuracionLNACGlobalJSON.sorteoExtraordinarioNinno.fechaFin == null) 
            || (configuracionLNACGlobalJSON.sorteoExtraordinarioNinno.fechaFin == '') 
            || (fechaFinNinno >= fechaUsuario)) {
          desactivarLoginVentas = true;
        }
      }
      if (!desactivarLoginVentas && esCelebrationNavidadONinio()) {
        desactivarLoginVentas = true;
      }
      if (!desactivarLoginVentas) {
        if(configuracionLNACGlobalJSON.desactivacionCabeceraLnac.fechaInicio != null && configuracionLNACGlobalJSON.desactivacionCabeceraLnac.fechaFin != null){
          var desactivacionCabeceraLnacFechaInicio = new Date(configuracionLNACGlobalJSON.desactivacionCabeceraLnac.fechaInicio).getTime();
          var desactivacionCabeceraLnacFechaFin = new Date(configuracionLNACGlobalJSON.desactivacionCabeceraLnac.fechaFin).getTime();
          if (desactivacionCabeceraLnacFechaInicio <= fechaUsuario && desactivacionCabeceraLnacFechaFin >= fechaUsuario) {
            desactivarLoginVentas = true;
          }
        }
      }
    }
    if (desactivarLoginVentas) {
        console.log('header-saga.js > desactivarLoginVentas only register button enabled');
        updateElementsWhenSalesAreDisabled();
    }
    if (fechaIniciodesactivarLoginVentas && !desactivarLoginVentas) {
      callSagaMenuJSONService(sagaMenuJsonSvcUrl, sagaMenuMsgsJsonSvcUrl);
    } else {
      disableLoginSales = true;
      if(isNewDesignInOldApplied !== null && isNewDesignInOldApplied !== undefined && isNewDesignInOldApplied){
    	  jqHeader("#menuLoggedInSaga").css("display", "none");
      }
    }
  });
}


/**
 * Get the with in pixels of the window
 * 
 * @returns Number of pixels
 */
function getWidth() {
  try {
    if (jqHeader(window).width()) {
      return jqHeader(window).width();
    }
  } catch (err) {
    console.error('ERROR in getWidth: ' + err);
  }
  if (self.innerHeight) {
    return self.innerWidth;
  }
  if (document.documentElement && document.documentElement.clientHeight) {
    return document.documentElement.clientWidth;
  }
  if (document.body) {
    return document.body.clientWidth;
  }
}


function dropdownMenuSaga(buttonId, menuId) {
  jqHeader('#' + buttonId).click(function(event) {
    event.preventDefault();
    jqHeader('#' + menuId ).slideToggle("slow");
    toogleMenu(menuId);
  });
}


function toggleFormMobile(){
  jqHeader('a#toggleEnter').click(function() {
    if(jqHeader('#mobileForm').is(':visible')){
      jqHeader('#mobileForm').hide();
    }else{
      jqHeader('#mobileForm').show();
      jqHeader('#qa_cabecera_sorteos_contenedor').children().hide();
	  jqHeader('#qa_cabecera_sorteos_contenedor').hide();
    }
  });
}


function showAndHidePassword(button){
	var current = jqHeader(button).attr('action');
	if (current == 'show') {
		jqHeader(button).prev().attr('type','password');
		jqHeader(button).removeClass('ojo-cerrado').addClass('ojo-abierto').attr('action','hide');
	}
	if (current == 'hide') {
		jqHeader(button).prev().attr('type','text');
		jqHeader(button).removeClass('ojo-abierto').addClass('ojo-cerrado').attr('action','show');
	}
	
}


var allowSubmit = true;
jqHeader(document).ready(function() {
	dropdownMenuSaga('helloUser', 'helloMenu');
	dropdownMenuSaga('balanceLotobolsa', 'lotobolsaMenu');
	toggleFormMobile();
	try{
	    jqHeader("#enterButton").click(function(e) {
	       if (allowSubmit) {
	    	   jqHeader('#enterTxt').addClass( 'c-cabecera-menu__texto-off' );
	    	   jqHeader('#enterImage').attr('src','/f/loterias/estaticos/imagenes/sass/boton_entrar_off.svg');
	           allowSubmit = false;
	           localStorage.removeItem('cachedJSONp');
		       localStorage.removeItem('cachedTimeStampLS');
		       localStorage.removeItem('cachedNotificationsJSONp');
		       localStorage.removeItem('cachedTimeStampNotificationsLS');
	       } else {
	    	   return false;
	       }
	    });
	    jqHeader('#enterButtonMobile').click(function(e) {
		       if (allowSubmit) {
		    	   jqHeader('#enterButtonMobile').removeClass('c-login-movil__boton-blanco').addClass('c-login-movil__boton-blanco--off');
		           allowSubmit = false;
		           localStorage.removeItem('cachedJSONp');
			       localStorage.removeItem('cachedTimeStampLS');
			       localStorage.removeItem('cachedNotificationsJSONp');
			       localStorage.removeItem('cachedTimeStampNotificationsLS');
		       } else {
		    	   return false;
		       }
		    }); 
	    jqHeader("a[href*='logout']").on( "click", function() {
	    	   localStorage.removeItem('cachedJSONp');
		       localStorage.removeItem('cachedTimeStampLS');
		       localStorage.removeItem('cachedNotificationsJSONp');
		       localStorage.removeItem('cachedTimeStampNotificationsLS');
	    });
	    jqHeader('#showHidePassword').on( "click", function(e) {
			e.preventDefault();
			showAndHidePassword(this);	
		});
	    jqHeader('#showHidePasswordMobile').on( "click", function(e) {
			e.preventDefault();
			showAndHidePassword(this);	
		});
	}catch(error){
		console.log('Error al aplicar onclick en los botones "Entrar" de SAGA');
	}
});</script>

<div class="r-cabecera" id="header-main" data-url-path-prefix="/f" data-json-service-url="/servicios/proximosv3?game_id=TODOS&num=2" data-current-language="es">
	<div id="menuHeader" class="c-cabecera">
		<div class="c-cabecera__fila-superior">
			<a class="c-cabecera-menu__hamburguesa" id="qa_cabecera_menu__hamburguesa">
                <img class="c-cabecera-menu__icon-hamburguesa" src="/f/loterias/estaticos/imagenes/sass//menu_hamburguesa.svg" alt="Juegos">
                <span class="c-cabecera-menu__texto-hamburguesa">Juegos</span>
            </a>
			<div class="c-cabecera-logo">
                <h1>
                    <a href="https://www.loteriasyapuestas.es" title="Loter&iacute;as y apuestas">
                        <img id="qa_cabecera_logo_loteriasyApuestas" class="c-cabecera-logo__logotipo" src="/f/loterias/estaticos/imagenes/sass/logo_loterias.svg" alt="Loter&iacute;as y apuestas">
                        <span class="c-cabecera-logo__titulo">Loter&iacute;as y Apuestas</span>
                    </a>
                </h1>
            </div>
			<div id="menuHeaderSaga" class="c-cabecera-menu">
				<!-- NEW DESIGN HEADER: Logged and not Logged -->

<div class="c-cabecera-menu__item c-cabecera-menu__msg">
	<a href="https://juegos.loteriasyapuestas.es/jugar/cas/mensajes/notificaciones/?access=headercms&lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/mensajes/notificaciones/?access=headercms&lang=es" title="Mensajes">
		<img class="c-cabecera-menu__icono-msg" src="/f/loterias/estaticos/imagenes/sass/icono_msg_header.svg" alt="Mensajes">
		<span class="c-cabecera-menu__counter"></span>
	</a>
</div>
<div class="c-cabecera-menu__item c-cabecera-menu__item--logado">
	<div class="c-cabecera-menu__separador">|</div>
</div>
<div class="c-cabecera-menu__item c-cabecera-menu__registrate">
	<div id="helloUser" class="c-hola-usuario">
		<a class="c-hola-usuario__titulo" href="">
			<img id="userDropDownMenuHeadIcon" src="/f/loterias/estaticos/imagenes/sass/icono_usuario.svg" alt="Usuario" class="c-hola-usuario__img--movil esta-oculto-pc">
			<img src="/f/loterias/estaticos/imagenes/sass/icono_usuario.svg" alt="Usuario" class="c-hola-usuario__img esta-oculto-movil">
			<span class="c-hola-usuario__titulo-saludo">Hola</span>
			<span id="lotobolsaName" class="c-hola-usuario__titulo-nombre"></span>
		</a>
		<a id="userDropDownMenuIcon" href="">
			<img class="c-hola-usuario__icono-mas" src="/f/loterias/estaticos/imagenes/sass/icono_mas.svg" alt="M&aacute;s"> 
		</a>
		<span class="c-hola-usuario__texto-movil">Men&uacute;</span> 
	</div>
	<ul style="display:none" class="c-menu-usuario" id="helloMenu">
		<li class="c-menu-usuario__item c-menu-usuario__no_enlace" id="qa_cabecera_menu_usuario_20">
									Mis apuestas</li>
								<li>
									<ul class="c-submenu-usuario">
										<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_21">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/apuestas/historicos/?access=headercms&lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/apuestas/historicos/?access=headercms&lang=es" title="Apuestas">
														Apuestas</a>
												</li>
											<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_22">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/apuestas/suscripciones/?access=headercms&lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/apuestas/suscripciones/?access=headercms&lang=es" title="Suscripciones">
														Suscripciones</a>
												</li>
											<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_23">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/apuestas/favoritas/?access=headercms&lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/apuestas/favoritas/?access=headercms&lang=es" title="Favoritas">
														Favoritas</a>
												</li>
											</ul>
								</li>
							<li class="c-menu-usuario__item c-menu-usuario__no_enlace" id="qa_cabecera_menu_usuario_30">
									Mis Datos</li>
								<li>
									<ul class="c-submenu-usuario">
										<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_31">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/configuracion/datos-usuario?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/configuracion/datos-usuario?lang=es" title="Datos personales">
														Datos personales</a>
												</li>
											<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_32">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/mensajes/telefono-movil?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/mensajes/telefono-movil?lang=es" title="Teléfono asociado">
														Teléfono asociado</a>
												</li>
											<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_33">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/configuracion/club_conmigo_online?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/configuracion/club_conmigo_online?lang=es" title="Club Conmigo Online">
														Club Conmigo Online</a>
												</li>
											<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_34">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/configuracion/datos-cuenta/datos-cuenta-juegos/?access=headercms&lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/configuracion/datos-cuenta/datos-cuenta-juegos/?access=headercms&lang=es" title="Datos de acceso">
														Datos de acceso</a>
												</li>
											<li class="c-submenu-usuario__item" id="qa_cabecera_menu_usuario_35">
													<a class="c-submenu-usuario__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/mensajes/intereses-participante?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/mensajes/intereses-participante?lang=es" title="Notificaciones">
														Notificaciones</a>
												</li>
											</ul>
								</li>
							</ul>
</div>
<div class="c-cabecera-menu__item c-cabecera-menu__item--logado">
	<div class="c-cabecera-menu__separador">|</div>
</div>
<div class="c-cabecera-menu__item c-cabecera-menu__lotobolsa">
	<form id="sagaForm" class="c-cabecera-menu__form-login" method="post" name="frmSesion"  action="https://juegos.loteriasyapuestas.es/jugar/login"  >
		<input type="hidden" name="actualURL" id="actualURL" value="" />
		<div class="c-cabecera-menu__item">
			<input class="c-cabecera-menu__input-text c-cabecera-menu__input-text--correo" maxlength="128" type="text" name="dni_nie" id="tbUsu" autocomplete="username" placeholder="Correo electr&oacute;nico o NIF/NIE">
		</div>
		<div id="messagesForgetPassword" class="c-cabecera-menu__item">
			<input class="c-cabecera-menu__input-text" type="password" maxlength="15" name="password" id="tbPass" autocomplete="current-password" placeholder="Contrase&ntilde;a">
			<span class="c-cabecera-menu__button-invisible ojo-abierto" id="showHidePassword" action="hide" data-hide="Mostrar contraseña" data-show="Ocultar contraseña"></span>
		</div>
		<p class="c-cabecera-menu__texto-contrasena" id="qa_cabecera_textoOlvidasteContrasenya">
			<span class="c-cabecera-menu__texto-contrasena-span">
				&#x00bf;Has olvidado tu contrase&ntilde;a?</span>
			<a id="qa_cabecera_enlaceSolicitarNuevaContrasenya" class="c-cabecera-menu__enlace-contrasena" href="https://juegos.loteriasyapuestas.es/jugar/solicitar-contrasena" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/solicitar-contrasena" >Solicitar una nueva</a>
		</p>
		<div class="c-cabecera-menu__item">
			<div class="c-cabecera-menu__separador">|</div>
		</div>
		<div class="c-cabecera-menu__item">
			<button id="enterButton" type="submit" class="c-cabecera-menu__enlace" title="Entrar">
				<img id="enterImage" class="c-cabecera-menu__imagen" src="/f/loterias/estaticos/imagenes/sass/boton_entrar.svg" alt="Entrar">
				<p id="enterTxt" class="c-cabecera-menu__texto">Entrar</p>
			</button>
		</div>
	</form>
	<div id="balanceLotobolsa" class="c-saldo-lotobolsa">
		<a class="c-saldo-lotobolsa__valor-p esta-oculto-movil" id="qa_cabecera_usuario_saldo_cantidad">  
			<span class="c-saldo-lotobolsa__titulo">Saldo:</span>
			<span class="c-saldo-lotobolsa__valor" id="balancePC"></span>
			<img class="c-saldo-lotobolsa__icono-mas" src="/f/loterias/estaticos/imagenes/sass/icono_mas.svg" alt="M&aacute;s"> 
		</a>
		<!-- Mobile -->
		<div class="c-saldo-lotobolsa__valor-p esta-oculto-pc" id="qa_cabecera_usuario_saldo_cantidad">
			<a class="c-saldo-lotobolsa__titulo-enlace esta-oculto-pc" id="qa_cabecera_usuario_saldo_textoTuSaldo">
				<p class="c-saldo-lotobolsa__valor" id="balanceMobile" ></p>
				<p class="c-saldo-lotobolsa__titulo" id="qa_cabecera_usuario_saldo_textoTuSaldo">Saldo:</p>
			</a>
			<a id="lotobolsaDropDownMenuIconMobile" href="#" class="c-saldo-lotobolsa__enlace-mas-info">
				<img class="c-saldo-lotobolsa__icono-mas" src="/f/loterias/estaticos/imagenes/sass/icono_mas.svg" alt="M&aacute;s" id="qa_cabecera_usuario_saldo_botonCargarSaldo">
			</a>
		</div>
	</div>
	
	<ul style="display:none" class="c-menu-lotobolsa" id="lotobolsaMenu">
		<li class="c-menu-lotobolsa__item">
					<a class="c-menu-lotobolsa__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/carga/carga-lotobolsa?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/carga/carga-lotobolsa?lang=es" title="Cargar Lotobolsa">Cargar Lotobolsa</a>
				</li>
			<li class="c-menu-lotobolsa__item">
					<a class="c-menu-lotobolsa__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/movimientos?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/movimientos?lang=es" title="Movimientos">Movimientos</a>
				</li>
			<li class="c-menu-lotobolsa__item">
					<a class="c-menu-lotobolsa__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/descarga/descarga-lotobolsa?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/descarga/descarga-lotobolsa?lang=es" title="Descargar Lotobolsa">Descargar Lotobolsa</a>
				</li>
			<li class="c-menu-lotobolsa__item">
					<a class="c-menu-lotobolsa__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/opciones-lotobolsa?lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/lotobolsa/opciones-lotobolsa?lang=es" title="Opciones">Opciones</a>
				</li>
			<li class="c-menu-lotobolsa__item">
					<a class="c-menu-lotobolsa__enlace" href="https://juegos.loteriasyapuestas.es/jugar/cas/servicios-web/juegoResponsable" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/servicios-web/juegoResponsable" title="Juego Responsable">Juego Responsable</a>
				</li>
			</ul>
</div>
<div class="c-cabecera-menu__item">
	<div class="c-cabecera-menu__separador">|</div>
</div>
<div class="c-cabecera-menu__item c-cabecera-menu-enlace__btn-entrar">
	<a id="toggleEnter" class="c-cabecera-menu__enlace c-cabecera-menu__enlace--movil" title="Entrar" href="#">
		<img class="c-cabecera-menu__imagen" src="/f/loterias/estaticos/imagenes/sass/boton_entrar.svg" alt="Entrar">
		<p class="c-cabecera-menu__texto">Entrar</p>
	</a>
</div>
<div class="c-cabecera-menu__item c-cabecera-menu__item--salir">
	<a class="c-cabecera-menu__enlace c-cabecera-menu__enlace--salir" href="https://juegos.loteriasyapuestas.es/jugar/cas/logout/?access=headercms&lang=es" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/cas/logout/?access=headercms&lang=es" title="SALIR">
		<img class="c-cabecera-menu__imagen" src="/f/loterias/estaticos/imagenes/sass/icono_salir.svg" alt="Salir">
		<p class="c-cabecera-menu__texto">Salir</p>
	</a>
</div>
<div class="c-cabecera-menu__item c-cabecera-menu__boton-registrate-envoltorio">
	<a id="registerUser" href="https://juegos.loteriasyapuestas.es/jugar/registro/verificacion/" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/registro/verificacion/ "></a>
	<button id="registerButton" class="c-cabecera-menu__boton-registrate">Registro</button> 	
</div>

<!-- NEW DESIGN HEADER: Logged and not Logged END-->
<script type='text/javascript'>
	var jqSagaMenu = jQuery.noConflict();
	var loginEnterButtonUrl = "https://juegos.loteriasyapuestas.es/acceder/login ";
	var literalEnter = "Entrar";
	var saga_menu_json_service_url = 'https://juegos.loteriasyapuestas.es/jugar/servicios-rest/participante/sesion';
	var isActiveSagaMenuMessagesJsonService = 'false';
	var saga_menu_messages_json_service_url = 'https://juegos.loteriasyapuestas.es/jugar/cabecera/avisos';
	jqSagaMenu(document).ready(function() {
		try{
			if(isActiveSagaMenuMessagesJsonService == "true"){
				if(saga_menu_messages_json_service_url != null && saga_menu_messages_json_service_url != undefined && saga_menu_messages_json_service_url != ""){
					shouldLoadSagaMenu(saga_menu_json_service_url, saga_menu_messages_json_service_url);
				} else {
					shouldLoadSagaMenu(saga_menu_json_service_url);
					console.log('Error while updating SAGA menu: the saga menu messages json service is active but its URL is empty or null.');
				}
			} else {
				shouldLoadSagaMenu(saga_menu_json_service_url);
			}
		}catch (e) {
			console.log('Error while updating SAGA menu:' + e);
		}
		jqSagaMenu('button.c-cabecera-menu__boton-registrate').click(function() {
			jqSagaMenu('#registerUser')[0].click();
		});
	});
</script><div class="c-cabecera-menu__item c-cabecera-menu__item--movil600">
           <div class="c-cabecera-menu__separador">|</div>
       </div>
       <div class="c-cabecera-menu__item c-cabecera__idioma">
		<a id="link_es" class="esta-oculto" href="/es/resultados/quiniela/" hreflang="es">Castellano</a>
				<a id="link_ca" class="esta-oculto" href="/ca/resultados/quiniela/" hreflang="ca">Català</a>
				<a id="link_en" class="esta-oculto" href="/en/resultados/quiniela/" hreflang="en">English</a>
				<a id="link_eu" class="esta-oculto" href="/eu/resultados/quiniela/" hreflang="eu">Euskera</a>
				<a id="link_gl" class="esta-oculto" href="/gl/resultados/quiniela/" hreflang="gl">Galego</a>
				<a id="link_va" class="esta-oculto" href="/va/resultados/quiniela/" hreflang="va">Valencià</a>
				<span class="c-cabecera-menu__texto-idioma">Idioma      </span>
		<select id="language" class="c-cabecera-menu__idioma">
			<option selected="selected" id="ES" data-href-lang="es">Castellano</option>
					<option id="CA" data-href-lang="ca">Català</option>
					<option id="EN" data-href-lang="en">English</option>
					<option id="EU" data-href-lang="eu">Euskera</option>
					<option id="GL" data-href-lang="gl">Galego</option>
					<option id="VA" data-href-lang="va">Valencià</option>
					</select>
	</div>
<script type='text/javascript'>
	var currentLanguage = "es";
	var jqSagaLang = jQuery.noConflict();
	addCurrentURLParamsToLanguageLinks();
	jqSagaLang(document).ready(function() {
		try {
			jqSagaLang( "#language" ).change(function() {
				var linkId = jqSagaLang( "#language option:selected" ).data("href-lang");
				try{
					usrLangCookie.createCookie(linkId);
				} catch (error) {
					console.error("file '/f/loterias/estaticos/js/cookie.js' has not been loaded or its version is lower than 3.8.X.");
					console.error(error);
				}
				document.getElementById("link_"+linkId).click();
			});
		} catch (err) {
			console.error("ERROR al asociar el evento del desplegable de idiomas: " + err);
		}
	});
</script></div>
			<div id="mobileForm" class="c-login-movil__container" style="display:none">
                <form id="mobileSagaForm" class="c-login-movil__form" method="post" name="frmSesion"  action="https://juegos.loteriasyapuestas.es/jugar/login">
                		<input type="hidden" name="actualURL" id="actualURLMobile" value="" />
                    <img src="/f/loterias/estaticos/imagenes/sass/icono_login.svg" class="c-login-movil__icono">
                    <div class="c-login-movil__datos">
                        <p class="c-login-movil__texto">Correo electr&oacute;nico o NIF/NIE</p>
                        <input class="c-login-movil__input-text" maxlength="128" type="text" name="dni_nie" id="username" autocomplete="username">
                    </div>
                    <div class="c-login-movil__datos">
                        <p class="c-login-movil__texto">Contrase&ntilde;a</p>
                        <input class="c-login-movil__input-text" type="password" maxlength="15" name="password" id="password" autocomplete="current-password">
                        <span class="c-cabecera-menu__button-invisible ojo-abierto" id="showHidePasswordMobile" action="hide" data-hide="Mostrar contraseña" data-show="Ocultar contraseña"></span>
                    </div>
                    <p class="c-login-movil__texto">&#x00bf;Has olvidado tu contrase&ntilde;a?</p>
                    <div class="c-login-movil__idiomas">
                        <a href="https://juegos.loteriasyapuestas.es/jugar/solicitar-contrasena" class="c-login-movil__enlace-solicita">Solicitar una nueva</a>
                        <button id="enterButtonMobile" type="submit" class="c-login-movil__boton-blanco">ENTRAR</button>
                        <a href="#" class="c-login-movil__enlace-cuenta">&#x00bf;A&uacute;n no tienes cuenta?<br>Cr&eacute;ala ahora</a>
                        <a id="registerUserMobile" href="https://juegos.loteriasyapuestas.es/jugar/registro/verificacion/" data-href-pc="https://juegos.loteriasyapuestas.es/jugar/registro/verificacion/ "></a>
                        <button id="registerButtonMobile" class="c-login-movil__boton-azul">Reg&iacute;strate</button>

						<a id="link_es" class="c-login-movil__enlace-idiomas" href="/es/resultados/quiniela/" hreflang="es">Castellano</a>
								<div class="c-login-movil__separador">|</div>
								<a id="link_ca" class="c-login-movil__enlace-idiomas" href="/ca/resultados/quiniela/" hreflang="ca">Català</a>
								<div class="c-login-movil__separador">|</div>
								<a id="link_en" class="c-login-movil__enlace-idiomas" href="/en/resultados/quiniela/" hreflang="en">English</a>
								<div class="c-login-movil__separador">|</div>
								<a id="link_eu" class="c-login-movil__enlace-idiomas" href="/eu/resultados/quiniela/" hreflang="eu">Euskera</a>
								<div class="c-login-movil__separador">|</div>
								<a id="link_gl" class="c-login-movil__enlace-idiomas" href="/gl/resultados/quiniela/" hreflang="gl">Galego</a>
								<div class="c-login-movil__separador">|</div>
								<a id="link_va" class="c-login-movil__enlace-idiomas" href="/va/resultados/quiniela/" hreflang="va">Valencià</a>
								</div>                    
                </form>
            </div>
		</div>
		
		<div class="c-cabecera-menu__error">
			<div id="sagaIsDown" class="c-mensaje-down">
				<p class="c-cabecera-menu__item-mensaje">La informaci&oacute;n de usuario no est&aacute; disponible temporalmente.</p>
			</div>
		</div>
		<div class="c-cabecera-menu__error">
			<div id="sagaIsClosed" class="-mensaje-plataforma-cerrada" style="display: none">
				<p class="c-cabecera-menu__item-mensaje">
					En estos momentos no es posible acceder a la informaci&oacute;n personal ni realizar apuestas. Esperamos estar disponibles en unos minutos. Disculpa las molestias.</p>
			</div>
		</div>
		<div class="c-cabecera-menu__error">
			<div id="sagaNeedsCaptcha" class="c-mensaje-no-plataforma" style="display:none">
				<p class="c-cabecera-menu__item-mensaje">Los datos introducidos no son correctos. Pulsa <a href="https://juegos.loteriasyapuestas.es/acceder/login?lang=es" target="_blank" rel="noopener noreferer">aqu&iacute;</a> para acceder a tu sesi&oacute;n.</p>
			</div>
		</div>
		
		<div class="cabecera-menu-juegos_topaz">
				 <ul class="c-cabecera__juegos_topaz" id="qa_cabecera_sorteos_contenedor">
				 	<li style="display: none;" class="c-cabecera-juego_topaz c-cabecera-juego__titulo-botes--movil esta-oculto-pc">
		                <p class="c-cabecera-juego__titulo-botes">Botes en juego</p>
		            </li>	            
					<li style="display: none;" class="c-cabecera__juego--euromillones c-cabecera-juego_topaz" id="header-link-EMIL" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/euromillones/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--primitiva c-cabecera-juego_topaz" id="header-link-LAPR" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/la-primitiva/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--bonoloto c-cabecera-juego_topaz" id="header-link-BONO" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/bonoloto/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--gordo c-cabecera-juego_topaz" id="header-link-ELGR" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/gordo-primitiva/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--loteria-nacional c-cabecera-juego_topaz" id="header-link-LNAC" data-bet-href="/es/loteria-nacional" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--quiniela c-cabecera-juego_topaz" id="header-link-LAQU" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/la-quiniela/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--lototurf c-cabecera-juego_topaz" id="header-link-LOTU" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/lototurf/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--quinigol c-cabecera-juego_topaz" id="header-link-QGOL" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/quinigol/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					<li style="display: none;" class="c-cabecera__juego--quintuple c-cabecera-juego_topaz" id="header-link-QUPL" data-bet-href="https://juegos.loteriasyapuestas.es/jugar/quintupleplus/apuesta/?access=headercms&lang=es" data-bet-title="JUGAR"></li>
					
					<li style="display: none;" class="c-cabecera-juego c-cabecera-juego__boton-ahora--movil">
		                <a class="c-cabecera-juego__boton-ahora" title="" href="https://www.loteriasyapuestas.es/es/apostar-online" id="qa_cabecera_hamburguer_boton_ahoraEnJuego">
		                    <img class="c-cabecera-juego__imagen-boton" src="/f/loterias/estaticos/imagenes/sass/ahora_en_juego.svg" alt="Ahora en Juego">
		                    <p class="c-cabecera-juego__texto-ahora">Ahora en Juego</p>
		                </a>
		            </li>	 
				 </ul>
			 </div>
			</div>
</div>
<div id="lotoBolsaPC" class="r-ultimo-acceso esta-oculto">
    <div class="c-ultimo-acceso" id="qa_cabecera_sesion_contenedor">
        <p class="c-ultimo-acceso__texto">
            <img class="c-ultimo-acceso__icono" src="/f/loterias/estaticos/imagenes/sass/ultimo_acceso.svg" alt="&Uacute;ltimo acceso:">
            <span class="c-ultimo-acceso__texto-sesion" id="qa_cabecera_sesion_textoSesion">Sesi&oacute;n:</span>
            <span id="timePC" class="c-ultimo-acceso__sesion"></span>
            <span class="c-ultimo-acceso__sesion-separador">- </span>
            <span class="c-ultimo-acceso__ultimo-acceso" id="qa_cabecera_sesion_textoUltimoAcceso">&Uacute;ltimo acceso:</span>
            <span id="datePC" class="c-ultimo-acceso__fecha"></span>
            <span id="hourPC" class="c-ultimo-acceso__hora"></span>
        </p>
    </div>
</div>

<script type='text/javascript'>
var jqSagaMenu = jQuery.noConflict();
var literalMobileEnter = "ENTRAR";
var registerButtonURLMobile = "https://juegos.loteriasyapuestas.es/jugar/registro/verificacion/";
var literalMobileRegister = "Reg&iacute;strate";
jqSagaMenu(document).ready(function() {
	jqSagaMenu('button#registerButtonMobile').click(function(event) {
		event.preventDefault();
		var href = jqSagaMenu('#registerUserMobile').attr('href');
		window.location=href;
	});	
});
</script>

</div>
<div class="portal-seccion-destacado" >

			    <!-- Topaz Activation -->
<script type="text/javascript">
var topazLiteral = '_topaz';
var imagesFolder = 'topaz';
</script>


<script type="text/javascript">var jqDrawHighlighted = jQuery.noConflict();

jqDrawHighlighted(document).ready(function() {
	var gameCode = jQuery('[id^="highlighted-"]').data('game-code');
	var jsonServiceUrl = jQuery('#highlighted-' + gameCode).data('json-service-url');
	var currentLanguage = jQuery('#highlighted-' + gameCode).data('current-language');
	var weekDays = jQuery('#highlighted-' + gameCode).data('week-days');
	var dayMessage = jQuery('#highlighted-' + gameCode).data('message-day');
	var urlPathPrefix = jQuery('#highlighted-' + gameCode).data('url-path-prefix');
	var playLink0 = jQuery('#highlighted-' + gameCode).data('play-link0');
	var playLink2 = jQuery('#highlighted-' + gameCode).data('play-link2');

	if (drawsData === undefined) {
		jqHeader.getJSON('//' + window.location.host + jsonServiceUrl, function(data) {
			if (data) {
				extractData(gameCode, data, currentLanguage, playLink0, playLink2, urlPathPrefix, weekDays, dayMessage);
			} else {
				console.debug('ERROR: no se han cargado los datos actualizados para el bote destacado de ' + gameCode);
			}
		}).fail(function(jqxhr, textStatus, error) {
			var err = textStatus + ', ' + error;
			console.log('Request Failed: ' + err);
		});
	} else {
		extractData(gameCode, drawsData, currentLanguage, playLink0, playLink2, urlPathPrefix, weekDays, dayMessage);
	}
});

function extractData(gameCode, data, currentLanguage, playLink0, playLink2, urlPathPrefix, weekDays, dayMessage) {
  var draws = [];
  var isLnacSpecialPrize = false;
  var formattedPrize;
  var formattedDate;
  var openingDate;
  var closingDate;
  
  if (data.length > 0) {
    for (var index = 0; index < data.length; index++) {
      if (data[index].game_id === gameCode) {
        draws.push(data[index]);
      }
    }
    var drawsLength = draws.length;
    if (drawsLength > 0) {
      if (drawsLength > 1) {
        draws.sort(function(a, b) {
          return (new Date(a.fecha.replace(/-/g, '/'))).getTime() - (new Date(b.fecha.replace(/-/g, '/'))).getTime();
        });
      }

      if (draws[0].estado === 'abierto' && (draws[0].fecha !== undefined && draws[0].fecha !== null) && gameCode !== 'LNAC') {
        formattedPrize = formatHighlightedCurrency(gameCode, draws[0].premio_bote, currentLanguage, draws[0].id_sorteo);
        formattedDate = formatHighlightedDate(gameCode, draws[0].fecha, draws[0].jornada, weekDays, dayMessage);
        openingDate = draws[0].apertura;
        closingDate = draws[0].cierre;
      } else if (draws[0].estado === 'abierto' && (draws[0].fecha !== undefined && draws[0].fecha !== null)) {
        if (draws[0].premio_especial !== undefined && draws[0].premio_especial !== null) {
          formattedPrize = formatHighlightedCurrency(gameCode, draws[0].premio_especial, currentLanguage, draws[0].id_sorteo);
          isLnacSpecialPrize = true;
        } else {
          formattedPrize = formatHighlightedCurrency(gameCode, draws[0].primer_premio, currentLanguage, draws[0].id_sorteo);
        }

        formattedDate = formatHighlightedDate(gameCode, draws[0].fecha, draws[0].jornada, weekDays, dayMessage);
        openingDate = draws[0].apertura;
        closingDate = draws[0].cierre;
        playLink2 = setLinkLnac(gameCode, playLink2, draws[0].id_sorteo);
      } else if (drawsLength > 1 && draws[1].estado === 'abierto' && (draws[1].fecha !== undefined && draws[1].fecha !== null) && gameCode !== 'LNAC') {
        formattedPrize = formatHighlightedCurrency(gameCode, draws[1].premio_bote, currentLanguage, draws[1].id_sorteo);
        formattedDate = formatHighlightedDate(gameCode, draws[1].fecha, draws[1].jornada, weekDays, dayMessage);
        openingDate = draws[1].apertura;
        closingDate = draws[1].cierre;
      } else if (drawsLength > 1 && draws[1].estado === 'abierto' && (draws[1].fecha !== undefined && draws[1].fecha !== null)) {
        if (draws[1].premio_especial !== undefined && draws[1].premio_especial !== null) {
          formattedPrize = formatHighlightedCurrency(gameCode, draws[1].premio_especial, currentLanguage, draws[1].id_sorteo);
          isLnacSpecialPrize = true;
        } else {
          formattedPrize = formatHighlightedCurrency(gameCode, draws[1].primer_premio, currentLanguage, draws[1].id_sorteo);
        }
        formattedDate = formatHighlightedDate(gameCode, draws[1].fecha, draws[1].jornada, weekDays, dayMessage);
        openingDate = draws[1].apertura;
        closingDate = draws[1].cierre;
        playLink2 = setLinkLnac(gameCode, playLink2, draws[0].id_sorteo);
      }
    }
  }
  buildHighlighted(gameCode, playLink0, playLink2, formattedPrize, formattedDate, urlPathPrefix, isLnacSpecialPrize, openingDate, closingDate);
}

function buildHighlighted(gameCode, playLink0, playLink2, formattedPrize, formattedDate, urlPathPrefix, isLnacSpecialPrize, startDate, endDate){ 
    var context = {
      playLink0:            playLink0,
      playLink2:            playLink2,
      prize:                formattedPrize,
      date:                 formattedDate,
      urlPathPrefix:        urlPathPrefix,
      isLnacSpecialPrize:   isLnacSpecialPrize,
      isDrawOpen:           isDrawOpen(startDate, endDate),
      hasPrize:             formattedPrize !== null && formattedPrize !== undefined && !jqDrawHighlighted.isEmptyObject(formattedPrize)
    };
    
    context.topazLiteral = topazLiteral;
    context.imagesFolder = imagesFolder;

    Handlebars.registerPartial("draw-highlighted-award-template", jqDrawHighlighted("#draw-highlighted-award-template").html());
    Handlebars.registerPartial("draw-highlighted-no-award-template", jqDrawHighlighted("#draw-highlighted-no-award-template").html());

    var template = Handlebars.compile(jqDrawHighlighted('#draw-highlighted-template').html());
    jqDrawHighlighted('#highlighted-'+gameCode).html(template(context));
    jqDrawHighlighted('#highlighted-' + gameCode).removeClass('esta-oculto');   
}

function isDrawOpen(startDate, endDate){
  if (startDate && endDate) {
    startDate = new Date(startDate.replace(' ', 'T'));
    endDate = new Date(endDate.replace(' ', 'T'));
    var currentDate = new Date();

    if (Date.parse(currentDate) >= Date.parse(startDate) && Date.parse(currentDate) <= Date.parse(endDate)) {
      return true;
    }
  }

  return false;
}

function setLinkLnac(gameCode, url, drawId) {
  if (gameCode === 'LNAC' && drawId != null && drawId != undefined) {
    if (url.indexOf('?') != -1) {
      url += "&sorteo=" + drawId;
    } else {
      url += "?sorteo=" + drawId;
    }
  }
  return url;
}

function formatHighlightedCurrency(gameCode, value, currentLanguage, drawId) {
  var prize = {};
  
  if(value !== undefined && value !== null) {
    var isEnglish = 'EN' == currentLanguage || 'en' == currentLanguage; 
    if (Math.abs(Number(value)) >= 1010000) {
        var formatedValue = Number(value) / 1.0e+6;
        var re = new RegExp('^-?\\d+(?:\.\\d{0,2})?');
        formatedValue = formatedValue.toString().match(re)[0];
        if(!isEnglish){
            formatedValue = Number(formatedValue).toLocaleString("es-ES");
        } else {
          formatedValue = Number(formatedValue).toLocaleString("en-EN");
        }
        prize.formatedValue = formatedValue; 
        prize.isMillionsValue = true;
      } else {
        prize.formatedValue = formatThousandsNumber(value, isEnglish);
        prize.isMillionsValue = false;
        if(value > 99999) {
            prize.moreThanFiveDigits = true;
        } else {
            prize.moreThanFiveDigits = false;
        }
      }
    }
  
  return prize;
}

function formatThousandsNumber(value, isEnglish) {
	var number = parseFloat(value);
	var roundNumber = null;
	if (number != null && number != undefined && !isNaN(number)) {
		if(!isEnglish){
			roundNumber = parseFloat(number).toLocaleString("es-ES");
		} else {
	        roundNumber = parseFloat(number).toLocaleString("en-EN");
		}
	}
	return roundNumber;
}

function hasWhiteSpace(s) {
  return /\s/g.test(s);
}

function formatHighlightedDate(gameCode, dateValue, dayValue, weekDays, dayMessage) {
    var date = new Date(dateValue.replace(/-/g, '/'));
    
    var highlightedDate = {};
    highlightedDate.formattedDate = paddedWithZero(date.getDate()) + '/' + paddedWithZero(date.getMonth() + 1) + '/' + date.getFullYear();
    highlightedDate.weekDay = weekDays.split(',')[date.getDay()];
  
    if('LOTU' === gameCode || 'QUPL' === gameCode || 'LAQU' === gameCode || 'QGOL' === gameCode) {
        highlightedDate.roundMessage = dayValue != null ? dayMessage.replace('{0}', dayValue) : '';
    }
    
    return highlightedDate;
}


function paddedWithZero(value){
  if(value < 10) {
    return '0' + value;
  } else {
    return value;
  }
}
</script>
<script type="text/javascript">Handlebars.registerHelper('formatSportDrawDate', function(literal, date) {
  return literal.replace('{0}', date.weekDay).replace('{1}', date.formattedDate);
});</script>

<script id="draw-highlighted-award-template" type="text/html">
	<div class="c-elemento-destacado__columna-info-bote">
				<div class="c-elemento-destacado__fondo-a c-elemento-destacado__fondo-a--quiniela">
					<p class="c-elemento-destacado__mensaje-a-bote">
						{{#if prize.isMillionsValue}}
							<span class="c-elemento-destacado__cantidad-millones">
								{{prize.formatedValue}}
							</span> 
							<span class="c-elemento-destacado__cantidad-millones-literal">
								Millones <span class='c-elemento-destacado__cantidad-millones-literal-movil'>de &#x20ac;</span></span>
						{{else}}
                     		{{#if prize.moreThanFiveDigits}}
                     			<span class="c-elemento-destacado__cantidad-miles c-elemento-destacado__cantidad-miles">
							{{else}}
								<span class="c-elemento-destacado__cantidad-miles c-elemento-destacado__cantidad-miles-s">
							{{/if}}
								{{prize.formatedValue}}
								&#x20ac;</span>
						{{/if}}
					</p>
					{{#if isDrawOpen}}
						<div class="c-elemento-destacado__contenedor-boton-jugar-movil esta-oculto-pc">
							<span class="c-elemento-destacado__boton-jugar-s-movil">Jugar</span>
						</div>
					{{/if}}
				</div>
				<div class="c-elemento-destacado__fondo-b c-elemento-destacado__fondo-b--quiniela esta-oculto-movil">
					{{#if isDrawOpen}}
						<div class="c-elemento-destacado__contenedor-boton-jugar">
							<span class="c-elemento-destacado__boton-jugar-s">Jugar</span>
						</div>
					{{/if}}
				</div>
			</div>
</script><script id="draw-highlighted-no-award-template" type="text/html">
			<div class="c-elemento-destacado__columna-info">
				<div class="c-elemento-destacado__fondo-a c-elemento-destacado__fondo-a--quiniela">
					<p class="c-elemento-destacado__mensaje-a c-elemento-destacado__mensaje-a--boton-jugar">
						La <span class='c-elemento-destacado__mensaje-a-negrita'>apuesta deportiva</span> que da los premios <span class='c-elemento-destacado__mensaje-a-negrita'>M&aacute;s grandes</span></p>
					{{#if isDrawOpen}}
						<div class="c-elemento-destacado__contenedor-boton-jugar-movil esta-oculto-pc">
                        	<span class="c-elemento-destacado__boton-jugar-s-movil">Jugar</span>
                    	</div>
					{{/if}}
				</div>
				<div class="c-elemento-destacado__fondo-b c-elemento-destacado__fondo-b--quiniela">
					<div class="c-elemento-destacado__mensaje-b">
						<p class="c-elemento-destacado__linea-mensaje-inicial-b c-elemento-destacado__linea-mensaje-inicial-b--quiniela">
							Por <span class='linea-apuesta-a__cantidad linea-apuesta-a__cantidad--quiniela'>1,50</span>&#x20ac;</p>
						<p class="c-elemento-destacado__linea-mensaje-intermedia-b">Si&eacute;ntete como un</p>
						<p class="c-elemento-destacado__linea-mensaje-final-b c-elemento-destacado__linea-mensaje-final-b--quiniela">Futbolista</p>
					</div>
					{{#if isDrawOpen}}
						<div class="c-elemento-destacado__contenedor-boton-jugar c-elemento-destacado__contenedor-boton-jugar--bote-venta esta-oculto-movil">
                        	<span class="c-elemento-destacado__boton-jugar-s">Jugar</span>
                    	</div>
					{{/if}}
				</div>
			</div>	
</script><script id="draw-highlighted-template" type="text/html">
	<a class="c-elemento-destacado-enlazable" href="{{playLink2}}" title="{{playLink0}}">
		{{#if hasPrize}} 
			<div class="c-elemento-destacado__contenedor-con-bote">	
				{{> draw-highlighted-award-template}}
		{{else}} 
			<div class="c-elemento-destacado__contenedor-sin-bote">
				{{> draw-highlighted-no-award-template}}
		{{/if}}
			
			<div class="c-elemento-destacado__contenedor-datos-sorteo">
				{{#if isDrawOpen}}
					<div class="c-elemento-destacado__columna-datos c-elemento-destacado__columna-datos--quiniela">
						<div class="c-elemento-destacado__fila-dato-a">{{date.roundMessage}}</div>
						<div class="c-elemento-destacado__fila-dato-b">
							{{formatSportDrawDate '{0}, {1}' date}}						</div>
					</div>
				{{/if}}
				<div class="c-elemento-destacado__columna-logo-con-bote c-elemento-destacado__columna-logo-con-bote--quiniela">
					<img class="c-elemento-destacado__columna-logo-img" src="{{urlPathPrefix}}/loterias/estaticos/imagenes/{{imagesFolder}}/logoquinielaElementoDestacado{{topazLiteral}}.svg">
				</div>
			</div>
		</div>
	</a>
</script>
	<div class="r-elemento-destacado esta-oculto " id="highlighted-LAQU" data-json-service-url="/servicios/proximosv3?game_id=TODOS&num=2" 
		data-game-code="LAQU" data-current-language="es"
		data-url-path-prefix="/f"
		data-week-days="Domingo,Lunes,Martes,Mi&eacute;rcoles,Jueves,Viernes,S&aacute;bado" 
		data-message-day="Jornada {0}&#x00aa;"
		data-play-link0="JUGAR"
		data-play-link2="https://juegos.loteriasyapuestas.es/jugar/la-quiniela/apuesta/?access=subhome&lang=es">
	</div>
</div>
<div class="portal-seccion-breadcrumb" >

			    <div class="r-breadcrumb c-breadcrumb">
    <ul class="c-breadcrumb__ul">
        <li class="c-breadcrumb__li">
            <a class="c-breadcrumb__enlace" href="/es" title="enlace home" id="qa_breadcrumb-nivel1">
                <img class="c-breadcrumb__enlace-imagen" src="/f/loterias/estaticos/imagenes/sass/home.svg" alt="home">
                home
            </a>
        </li>
        <li class="c-breadcrumb__li">
            <a class="c-breadcrumb__enlace" href="/es/resultados" title="Resultados" id="qa_breadcrumb-nivel2">Resultados</a>
        </li>
        <li class="c-breadcrumb__li" id="qa_breadcrumb-nivel3">La Quiniela</li>
    </ul>
</div></div>
<div class="portal-seccion-resultados" >

			    <!-- Topaz Activation -->
<script>
var topazLiteralAgraciados = '_topaz';
var isTopazEnabled = 'true';
</script>

<link rel="stylesheet" href="/f/loterias/estaticos/css/jquery-ui-1.8.23.custom.css" type="text/css" media="all">
<link rel="stylesheet" href="/f/loterias/estaticos/css/jquery-ui.css" type="text/css" media="all">
<script src="/f/loterias/estaticos/js/jquery-ui.min.js" type="text/javascript"></script>
<script src="/f/loterias/estaticos/js/jquery.ui.datepicker-es.js" type="text/javascript"></script>
<script id="loader-template" type="text/html">
	<div class="c-resultados-buscador__loader-resultados-contenedor">
  		<img class="c-resultados-buscador__loader-resultados-img" src="{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/Spinner-1.1s-136px.gif">
       	<p class="c-resultados-buscador__loader-resultados-text">Cargando...</p>
  	</div>
</script><script id="errors-template" type="text/html">
	<img class="c-buscador-sorteos_imagen-alerta" src="{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/alerta.svg" alt="alerta">
	{{#errors}}
    	<p class="c-buscador-sorteos__texto">
			{{{this}}}
		</p>
	{{/errors}}
</script><script id="no-results-template" type="text/html">
	<div class="c-resultados-buscador__resultados-nulo c-resultado-error--nulo">
    	<div class="c-resultado-error__nulo">
        	<img  class="c-resultado-error__imagen" src="{{urlPathPrefix}}/loterias/estaticos/imagenes/sass/error.svg" alt="Error">
           	<p class="c-resultado-error__texto">&#x00a1;No hay resultados para el intervalo de fechas indicadas!</p>
       	</div>
	</div>
</script><script id="draw-template" type="text/html">
{{#draws}}
	<div class="c-resultados-buscador__quiniela c-resultado-sorteo--quiniela" id="qa_resultadoSorteo-sorteo-LAQU-{{add @root.startIndex @index}}">
            <div class="c-resultado-sorteo__quiniela">
                <a class="c-resultado-sorteo__enlace-cabecera" href="#" title="+ Info ">
                    <div class="c-resultado-sorteo__cabecera--quiniela" id="qa_resultadoSorteo-masInfo-LAQU-{{add @root.startIndex @index}}" data-draw-id="{{id_sorteo}}">
                        <img class="c-resultado-sorteo__icono" src="{{../urlPathPrefix}}/loterias/estaticos/imagenes/sass/logoQuinielaUltimosResultados.svg" alt="La Quiniela">
                        <p class="c-resultado-sorteo__titulo">La Quiniela<span class="c-resultado-sorteo__titulo-jornada_movil"> {{{roundMsgMobile jornada}}}</span>
							<span class="c-resultado-sorteo__fecha-jornada"> {{{roundMsg jornada}}}</span>
						</p>
                        <p class="c-resultado-sorteo__fecha" id="qa_resultadoSorteo-fecha-LAQU-{{add @root.startIndex @index}}">{{formatDate fecha_sorteo}}</p>
						{{#if escrutinio}}
                        	<p class="c-resultado-sorteo__mas-info" title="+ Info ">+ Info <i class="fa fa-angle-down"></i></p>
						{{/if}}
                    </div>
                </a>
				<table class="c-resultado-sorteo__tabla"  id="qa_resultadoSorteo-partidos-LAQU-{{add @root.startIndex @index}}" summary="">
					<tbody>
						{{#partidos}}
						<tr class="c-resultado-sorteo__tabla-tr{{addShadowQuiniela @index}}">
							{{#if (equals @index 14)}}
								<td class="c-resultado-sorteo__tabla-td-orden c-resultado-sorteo__tabla-td-orden--pleno15">
									P-15</td>
							{{else}}
								<td class="c-resultado-sorteo__tabla-td-orden">
									{{posicion}}.
								</td>
							{{/if}}
							<td class="c-resultado-sorteo__tabla-td-titulo" id="qa_resultadoSorteo-partido-LAQU-{{add @root.startIndex @../index}}{{@index}}">
								<span class="c-resultado-sorteo__tabla-equipo1">{{local}}</span> - 
								<span class="c-resultado-sorteo__tabla-equipo2">{{visitante}}</span>
							</td>
							<td class="c-resultado-sorteo__tabla-td-resultado" id="qa_resultadoSorteo-marcador-LAQU-{{add @root.startIndex @../index}}{{@index}}">
								{{#if marcador}}
									<span class="c-resultado-sorteo__tabla-span-resultado--quiniela">									
										{{marcador}}
									</span>
								{{else}}
									{{#if fecha}}
										<span class="c-resultado-sorteo__tabla-span-proximo--quiniela">
											{{formatDate fecha_completa}}
										</span>
									{{else}}
										<span class="c-resultado-sorteo__tabla-span-resultado--quiniela">
											-
										</span>
									{{/if}}
								{{/if}}
							</td>
							<td class="c-resultado-sorteo__tabla-td-simbolo" id="qa_ultResult-signoGanador-LAQU-{{add @root.startIndex @../index}}{{@index}}">
								<span class="c-resultado-sorteo__tabla-span-simbolo--quiniela{{moreThanOneCharacter signo hora}}">
									{{#if signo}}
										{{signo}}
									{{else}}
										{{#if hora}}
											{{hora}}
										{{else}}
											-
										{{/if}}
									{{/if}}
								</span>
							</td>
						</tr>
						{{/partidos}}
					</tbody>
				</table>
		
				{{#if escrutinio}}
                <div class="c-resultado-sorteo__detalle-resumen esta-oculto" id="more-info-LAQU-{{add @root.startIndex @index}}">
                    <div class="c-resultado-sorteo__escrutinio c-resultado-escrutinio">
                        <table class="c-resultado-escrutinio" id="qa_resultadoSorteo-escrutinio-LAQU-{{add @root.startIndex @index}}">
                            <thead class="c-resultado-escrutinio__thead">
                            <tr class="c-resultado-escrutinio__thead-tr">
                                <th class="c-resultado-escrutinio__th c-resultado-escrutinio__th--aliado-izquierda">Categor&iacute;as</th>
                                <th class="c-resultado-escrutinio__th">Acertantes</th>
                                <th class="c-resultado-escrutinio__th c-resultado-escrutinio__th--aliado-derecha">Premios</th>
								{{#if (showWinners escrutinio)}}
                                	<th class="c-resultado-escrutinio__th">Agraciados</th>
								{{/if}}
                            </tr>
                            </thead>
                            <tbody class="c-resultado-escrutinio__tbody">
								{{#escrutinio}}
									<tr class="c-resultado-escrutinio__tr{{addShadow @index}}">
										<td class="c-resultado-escrutinio__td c-resultado-escrutinio__td--aliado-izquierda">
											<span class="c-resultado-escrutinio__categoria" id="qa_resultadoSorteo-escrutinioCat-LAQU-{{add @root.startIndex @../index}}{{@index}}">{{checkStringFromJson tipo}}</span>
										</td>
										<td class="c-resultado-escrutinio__td">
											<span class="c-resultado-escrutinio__acertantes" id="qa_resultadoSorteo-escrutinioAcert-LAQU-{{add @root.startIndex @../index}}{{@index}}">{{formatNumber ganadores}}</span>
										</td>
										<td class="c-resultado-escrutinio__td c-resultado-escrutinio__td--aliado-derecha">
											<span class="c-resultado-escrutinio__premios" id="qa_resultadoSorteo-escrutinioPrem-LAQU-{{add @root.startIndex @../index}}{{@index}}">{{formatCurrency premio true}}</span>
										</td>
										{{#if (showWinners ../escrutinio)}}
											<td class="c-resultado-escrutinio__td">
												{{#if (showWinnersByCategory this)}}
													<a id="scrutinyModal-{{categoria}}-0" class="c-resultado-escrutinio__enlace-agraciados" data-categoria="{{categoria}}"
														href="#inline_content" data-drawId="{{../id_sorteo}}" data-typeCss="modal-quiniela" data-detalleTxt="{{titleModal ../../literalTxtDraw ../this}}" data-categoriaTxt="{{tipo}}"
														data-viewShowMap="{{../../showGeoMapUrl}}" data-urlGeoMap="{{{linkGeoUrl categoria ../this}}}" id="qa_resultadoSorteo-escrutinioAgraciados-LAQU-{{add @root.startIndex @../index}}{{categoria}}"> 
														<img class="c-resultado-escrutinio__enlace-agraciados-imagen" src="{{../../urlPathPrefix}}/loterias/estaticos/imagenes/sass/globo.png" alt="">
													</a>
												{{/if}}
											</td>
										{{/if}}
									</tr>
								{{/escrutinio}}
							</tbody>
						</table>
						{{#if escrutinioElige8}}
								<table class="c-comp-quiniela__tabla-resultados tabla-elige8" id="qa_comprobador-escrutinio-ELG8">
                        			 <thead class="c-resultado-escrutinio__thead">
                            			<tr class="c-resultado-escrutinio__thead-tr">
                                			<th class="c-resultado-escrutinio__th c-resultado-escrutinio__th--aliado-izquierda">Elige 8</th>
	                                		<th class="c-resultado-escrutinio__th">Acertantes</th>
    	                            		<th class="c-resultado-escrutinio__th c-resultado-escrutinio__th--aliado-derecha">Premios</th>
											{{#if (showElige8Winners @root.showWinners escrutinioElige8)}}
    	                            			<th class="c-resultado-escrutinio__th">Agraciados</th>
											{{/if}}
                	            		</tr>
                            		</thead>
                            		<tbody class="c-comp-quiniela__tabla-resultados-body">
										{{#escrutinioElige8}}
                            				<tr class="c-resultado-escrutinio__tr{{addShadow @index}}">
	                                			<td class="c-resultado-escrutinio__td c-resultado-escrutinio__td--aliado-izquierda" id="qa_resultadoSorteo-escrutinioCat-ELG8">{{{getCategoryTxt categoria}}}</td>
    	                            			<td class="c-resultado-escrutinio__td" id="qa_resultadoSorteo-escrutinioAcert-ELG8">{{formatNumber ganadores}}</td>
        	                        			<td class="c-resultado-escrutinio__td c-resultado-escrutinio__td--aliado-derecha" id="qa_resultadoSorteo-escrutinioPrem-ELG8">{{formatCurrency premio true}}</td>
												{{#if (showElige8Winners @root.showWinners ../escrutinioElige8)}}
													<td class="c-resultado-escrutinio__td" id="qa_resultadoSorteo-ELG8-escrutinioAgraciados-{{add @root.startIndex @../index}}{{@index}}">
														<a id="scrutinyModal-elige8-{{categoria}}" title="Repartido en..." class="c-resultado-escrutinio__enlace-agraciados cboxElement" href="#inline_content" data-categoria="{{categoria}}" data-drawId="{{../elige8.relsorteoid_asociado}}" data-typeCss="modal-elige8" data-detalleTxt="{{titleModal ../../literalTxtDraw ../this}}" data-categoriaTxt="{{{getCategoryTxt categoria}}}" data-viewShowMap="{{../../showGeoMapUrl}}" data-urlGeoMap="{{{linkGeoUrl 1 ../this}}}"> 
															<img class="c-resultado-escrutinio__enlace-agraciados-imagen" src="{{../../urlPathPrefix}}/loterias/estaticos/imagenes/sass/globo.png" alt="">
														</a>

													</td>
												{{/if}}
                            				</tr>
										{{/escrutinioElige8}}
                            		</tbody>
                        		</table>
						{{/if}}

                        <div class="c-resultado-escrutinio__avisos">	
							<!-- AVISOS -->
							{{#unless (hasFirstCategory escrutinio)}}
								<p class="c-resultado-escrutinio__aviso">
									Al no haber acertantes de Pleno al 15,el importe correspondiente se pondr&aacute; en juego como BOTE en la jornada que designe Loter&iacute;as y Apuestas del Estado.</p>
							{{/unless}}
							{{#unless (hasSecondCategory escrutinio)}}
								<p class="c-resultado-escrutinio__aviso">
									Al no haber acertantes de 1&#x00aa; categor&iacute;a, el importe correspondiente se pondr&aacute; en juego como BOTE en la jornada a determinar por Loter&iacute;as y Apuestas del Estado.</p>
							{{/unless}}
                        </div>
                    </div>
                    <ul class="c-resultado-sorteo__contenidos-relacionados c-resultado-contenidos-relacionados">
						{{#each (getPressReleases contenidosRelacionados.documentos)}}
                        	<li class="c-resultado-contenidos-relacionados__li" id="qa_resultadoSorteo-notaPrensa-LAQU-{{add @root.startIndex @../index}}{{@index}}">
                            	<a class="c-resultado-contenidos-relacionados__enlace" href="{{urlContenido}}">
                                	<img class="c-resultado-contenidos-relacionados__imagen" src="{{../../urlPathPrefix}}/loterias/estaticos/imagenes/sass/fichero.svg" alt="Nota de Prensa">
                                	{{#if tituloRelacion}}
										{{tituloRelacion}}
									{{/if}}
									{{#unless tituloRelacion}}
										{{tituloContenido}}
									{{/unless}}
                            	</a>
                        	</li>
						{{/each}}
                    </ul>
                    <div class="c-resultado-sorteo__otros-datos  c-resultado-otros-datos">
                        <table class="c-resultado-otros-datos__table" id="qa_resultadoSorteo-apuestas-LAQU">
                            <tbody class="c-resultado-otros-datos__tbody">
                            <tr class="c-resultado-otros-datos__tr">
								{{#if apuestas}}
                               		<td class="c-resultado-otros-datos__td">
                                	    <span class="c-resultado-otros-datos__td--texto">Apuestas recibidas:</span>
                                	</td>
                                	<td class="c-resultado-otros-datos__td" id="qa_resultadoSorteo-apuestas-LAQU-{{add @root.startIndex @index}}">
                                    	<span class="c-resultado-otros-datos__td--numero">{{formatNumber apuestas}}</span>
                                	</td>
								{{/if}}
								{{#if premio_bote}}
                                	<td class="c-resultado-otros-datos__td">
                                    	<span class="c-resultado-otros-datos__td--texto">Bote ofrecido:</span>
                                	</td>
                                	<td class="c-resultado-otros-datos__td" id="qa_resultadoSorteo-bote-LAQU-{{add @root.startIndex @index}}">
	                                    <span class="c-resultado-otros-datos__td--numero">{{formatCurrencyOtherInformation premio_bote true}}</span>
                                	</td>
								{{/if}}
                            </tr>
                            <tr class="c-resultado-otros-datos__tr">
								{{#if recaudacion}}
                                	<td class="c-resultado-otros-datos__td">
                                    	<span class="c-resultado-otros-datos__td--texto">Recaudaci&oacute;n:</span>
                                	</td>
                                	<td class="c-resultado-otros-datos__td" id="qa_resultadoSorteo-recaudacion-LAQU-{{add @root.startIndex @index}}">
                                    	<span class="c-resultado-otros-datos__td--numero">{{formatCurrencyOtherInformation recaudacion false}}</span>
    	                            </td>
								{{/if}}
								{{#if premios}}
        	                        <td class="c-resultado-otros-datos__td">
            	                        <span class="c-resultado-otros-datos__td--texto">Premios:</span>
                	                </td>
									<td class="c-resultado-otros-datos__td" id="qa_resultadoSorteo-premios-LAQU-{{add @root.startIndex @index}}">
                        	            <span class="c-resultado-otros-datos__td--numero">{{formatCurrencyOtherInformation premios false}}</span>
                            	    </td>
								{{/if}}
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
			{{/if}}
        </div>
{{/draws}}
{{#if showLoadMoreDrawsButton}}
	<div class="c-resultado-sorteo__boton-mas-resultados" id="load-more-draws-target">
    	<button class="c-resultado-sorteo__boton-mas-resultados-boton" href="#" id="qa_resultadoSorteo-buscador-botonMasResultados-LAQU">
			M&aacute;s Resultados</button>
	</div>
{{/if}}
</script><script type="text/javascript">function getLanguage() {
  var isEnglish = 'EN' == currentLanguage || 'en' == currentLanguage;
  if (!isEnglish) {
    return "es-ES";
  } else {
    return "en-EN";
  }
}

function hasWhiteSpace(s) {
  return /\s/g.test(s);
}

function formatNumber(number, noMinimumFractionDigits) {
  var roundNumber = "0,00";

  var options = {
    minimumFractionDigits: 2
  };
  if (noMinimumFractionDigits) {
    options = {};
  }

  if (number != null && number != undefined) {
    roundNumber = parseFloat(number).toLocaleString(getLanguage(), options);
  }

  return roundNumber;
}

function removeTrailingZeros(number) {
  var numberResult = "";
  if (number != null && number != undefined){
      numberResult = number;
      if (numberResult.slice(-2) === '00'){
          numberResult  = numberResult.slice(0, -3);
      }
  }
  return numberResult;
}

function formatDate(value) {
	if (value !== null){
		var date = new Date(value.replace(/-/g, '/'));
		var day = date.getDate();
		var zeroDay = day < 10 ? '0' : '';
		var month = date.getMonth() + 1;
		var zeroMonth = month < 10 ? '0' : '';
		var year = date.getFullYear();
		return zeroDay + day + '/' + zeroMonth + month + '/' + year;
	}else{
		return '';
	}
}

function formatDateSimpleString(value) {
	if (value !== null){
		var date = new Date(value.replace(/-/g, '/'));
		var day = date.getDate();
		var month = date.getMonth() + 1;
		var year = date.getFullYear();
		if (month < 10){
		  month = '0' + month;
		} 
		return day + month + year;
	}else{
		return '';
	}
}

Handlebars.registerHelper('checkStringFromJson', function(value) {
  if(value !== null &&  value !== undefined && value != 0 && value.trim() !== "null"){
	  return value;
  }else{
	  return '';
  }
});

Handlebars.registerHelper('formatNumber', function(value) {
  if (value === null || value === undefined) {
      return '-';
  }
  return formatNumber(parseFloat(value), true);
});

Handlebars.registerHelper('formatCurrency', function(value, euros, noMinimumFractionDigits) {
  var treatedValue = '';
	  if(value !== null){
		  if(euros) {
			    treatedValue = parseFloat(value.replace(/,/g, "."));
			  } else {
			    treatedValue = parseFloat(value.replace(/,/g, ".") / 100);
			  }
		 
			  if(treatedValue < 0) {
			    return '*';
			  } else {
			    return formatNumber(treatedValue) + ' \u20AC';
			  }  
	  }
	  return '';
});

Handlebars.registerHelper('formatCurrencyOtherInformation', function(value, euros, noMinimumFractionDigits) {
	var treatedValue = '';
	  if(value !== null){
		  if(euros) {
			    treatedValue = parseFloat(value.replace(/,/g, "."));
		  } else {
		    treatedValue = parseFloat(value.replace(/,/g, ".") / 100);
		  }
		  treatedValue = formatNumber(treatedValue);
		  return removeTrailingZeros(treatedValue) + ' \u20AC'; 
	  }
	  return '';
});


Handlebars.registerHelper('formatDate', function(value) {
  return formatDate(value);
});

Handlebars.registerHelper('for', function(from, to, incr, block) {
  var accum = '';
  for (var i = from; i < to; i += incr)
    accum += block.fn(i);
  return accum;
});

Handlebars.registerHelper('inc', function(value, options) {
  return parseInt(value) + 1;
});

Handlebars.registerHelper('equals', function(v1, v2) {
  return v1 === v2;
});

Handlebars.registerHelper('ifEquals', function(arg1, arg2, options) {
  return (arg1 == arg2) ? options.fn(this) : options.inverse(this);
});

Handlebars.registerHelper('titleModal', function(txtDraw, draw) {
  var num = "LNAC" == draw.game_id? draw.num_sorteo : draw.numero;
  return txtDraw + '&nbsp;' + num + ' ' + formatDate(draw.fecha_sorteo);
});

Handlebars.registerHelper('linkGeoUrl', function(category, draw) {
  var num = "LNAC" == draw.game_id? draw.num_sorteo : draw.numero;
  return '/es/red%2Dcomercial?drawDate=' + formatDateSimpleString(draw.fecha_sorteo) + '&category=' + category + '&drawId=' + draw.id_sorteo + '&drawNumber=' + num;
});

Handlebars.registerHelper('addShadow', function(index) {
  if (index%2 == 0) {
    return '--sombreado';
  } else {
    return '';
  }
});

Handlebars.registerHelper('add', function(v1, v2) {
    return v1 + v2;
});

Handlebars.registerHelper('getPressReleases', function(documents) {
	var pressReleases = [];
	if(documents !== null){
		for (var i = 0; i < documents.length; i++) {
			var document = documents[i];
			if(document.tituloRelacion != null && document.tituloRelacion.toUpperCase().indexOf("NOTA DE PRENSA") != -1){
				pressReleases.push(document);
			} else if(document.tituloContenido != null && document.tituloContenido.toUpperCase().indexOf("NOTA DE PRENSA") != -1){
				pressReleases.push(document);
			}
		}
	}
	return pressReleases;
});</script>
<script type="text/javascript">Handlebars.registerHelper('addShadowQuiniela', function(index) {
  if (index === 14) {
    return '--sombreado-pleno15';
  } else if (index%2 != 0) {
    return '';
  } else {
    return '--sombreado-quiniela';
  }
});

Handlebars.registerHelper('hasFirstCategory', function(scrutinies) {
  var result = false;
  for(var i = 0; i < scrutinies.length; i++){
    if(scrutinies[i].categoria === 1){
      if(scrutinies[i].ganadores > 0) {
        result = true;
      } 
      break;
    }
  }
  return result;
});

Handlebars.registerHelper('hasSecondCategory', function(scrutinies) {
  var result = false;
  for(var i = 0; i < scrutinies.length; i++){
    if(scrutinies[i].categoria === 2){
      if(scrutinies[i].ganadores > 0) {
        result = true;
      } 
      break;
    }
  }
  return result;
});

Handlebars.registerHelper('showWinners', function(scrutinies) {
    return scrutinies.length > 0 
            && ((scrutinies[0].categoria === 1 && scrutinies[0].ganadores > 0) 
            || (scrutinies[1].categoria === 2 && scrutinies[1].ganadores > 0));
});

Handlebars.registerHelper('showWinnersByCategory', function(scrutiny) {
    return ((scrutiny.categoria === 1 && scrutiny.ganadores > 0) || (scrutiny.categoria === 2 && scrutiny.ganadores > 0));
});

Handlebars.registerHelper('roundMsgMobile', function(round) {
	var r = round != null ? round : '';
	return mobileRoundLabel.replace('{0}', r);
});

Handlebars.registerHelper('roundMsg', function(round) {
    var r = round != null ? round : '';
    return roundLabel.replace('{0}', r);
});

Handlebars.registerHelper('moreThanOneCharacter', function(matchResult, matchHour) {
  if (matchResult !== null && matchResult !== undefined) {
    matchResult = matchResult.trim();
    if (matchResult === null || matchResult === undefined || matchResult.length <= 1) {
      return '';
    } else {
      return ' multiple-resultado';
    }
  } else if (matchHour !== null && matchHour !== undefined) {
    return ' multiple-resultado';
  } else {
    return '';
  }
});

Handlebars.registerHelper('showElige8Winners', function(showWinners, scrutinyElige8) {
  return showWinners && scrutinyElige8[0].ganadores > 0;
});

Handlebars.registerHelper('getCategoryTxt', function(category) {
  switch (category) {
    case 1:
      return "";
    case 2:
      return "";
    case 3:
      return "";
    case 4:
      return "";
    case 5:
      return "";
    case 6:
      return "";
    case 7:
      return "";
    case 8:
      return "";
  }
});</script>
<script type="text/javascript">var fetchNewData = true;
var draws;
var jqResultadosBuscador = jQuery.noConflict();
var isActivatedLoader = true;
var page = 1;

var searchStartDate;

function getFormattedDate(date) {
  var result = "";
  if (date != null && date != undefined) {
    var year = date.substring(date.lastIndexOf('/') + 1, date.length);
    var month = date.substring(date.indexOf('/') + 1, date.indexOf('/') + 3);
    var day = date.substring(0, 2);
    result = year + month + day;
  }
  return result;
}

(function (w) {

  w.URLSearchParams = w.URLSearchParams || function (searchString) {
      var self = this;
      self.searchString = searchString;
      self.get = function (name) {
          var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(self.searchString);
          if (results == null) {
              return null;
          }
          else {
              return decodeURI(results[1]) || 0;
          }
      };
  }

})(window)

function setUrlParams() {
  var urlParams = new URLSearchParams(window.location.search);
  var date = urlParams.get('date');
  if (window.location.search != "" && date !== null) {
    setValueInField(date, 'qa_resultadoSorteo-buscador-fechaDesde-' + gameCode);
    setValueInField(date, 'qa_resultadoSorteo-buscador-fechaHasta-' + gameCode);
    fetchDraws(getFormattedDate(date), getFormattedDate(date), true);
  } else {
    searchStartDate = getModifiedDate(new Date(), -(maxDaysLimit));
    
    var differential = 0;
    if(gameCode === 'LAQU' || gameCode === 'QGOL') {
      differential = 7;
    }
    fetchDraws(searchStartDate, getModifiedDate(new Date(), differential), true);
  }
}

function setValueInField(value, id) {
  if (value != null && value != undefined && id != null && id != undefined) {
    jqResultadosBuscador('#' + id).val(value);
  }
}

jqResultadosBuscador(document).ready(function() {
  if (hasParametersUrl()) {
    setUrlParams();
  } else {
    searchStartDate = getModifiedDate(new Date(), -(maxDaysLimit));
    
    var differential = 0;
    if(gameCode === 'LAQU' || gameCode === 'QGOL') {
      differential = 7;
    }
    fetchDraws(searchStartDate, getModifiedDate(new Date(), differential), true);
  }
  // calendar activation
  jqResultadosBuscador('#qa_resultadoSorteo-buscador-fechaDesde-' + gameCode).datepicker({
    changeMonth: true,
    changeYear: true,
    showOtherMonths: true,
    selectOtherMonths: true,
    yearRange: "-30:+0"
  });
  jqResultadosBuscador('#qa_resultadoSorteo-buscador-fechaHasta-' + gameCode).datepicker({
    changeMonth: true,
    changeYear: true,
    showOtherMonths: true,
    selectOtherMonths: true,
    yearRange: "-30:+0"
  });

  // Search
  jqResultadosBuscador('#qa_resultadoSorteo-buscador-botonBuscar-' + gameCode).click(function(ev) {
    ev.preventDefault();

    if (isActivatedLoader) {
      return false;
    }

    var startDate = jqResultadosBuscador('#qa_resultadoSorteo-buscador-fechaDesde-' + gameCode).val();
    var endDate = jqResultadosBuscador('#qa_resultadoSorteo-buscador-fechaHasta-' + gameCode).val();

    var errors = validateDates(startDate, endDate);
    displayErrorMessages(errors);

    if (errors.length === 0) {
      var startDateSpanish = getDateInSpanishFormat(startDate);
      var endDateSpanish = getDateInSpanishFormat(endDate);

      searchStartDate = getDateAsParameter(startDateSpanish);
      var searchEndDate = getDateAsParameter(endDateSpanish);

      fetchDraws(searchStartDate, searchEndDate, true);
    }
  });
});

function popupThroughURL() {
  try {
    var drawId = getUrlParameter('drawId');
    var popupOn = getUrlParameter('popup');
    var popupMillionOn = getUrlParameter('popupmillion');
    var popupElige8On = getUrlParameter('popupelige8');
    var decimo = getUrlParameter('decimo');

    if ((popupOn != null && popupOn != undefined && popupOn == 'on') || (popupMillionOn != null && popupMillionOn != undefined && popupMillionOn == 'on') || (popupElige8On != null && popupElige8On != undefined && popupElige8On == 'on')) {
      jqResultadosBuscador(".scrutinyModal").colorbox({
        inline: true,
        maxWidth: '850px',
        maxHeight: '740px',
        className: 'detalle-sorteo',
        scrolling: true
      });

      var el = undefined;
      var draws = jqResultadosBuscador('[id^="qa_resultadoSorteo-masInfo-"]')
      for (var i = 0; i < draws.length; i++) {
        if (draws.get(i).getAttribute("data-draw-id") === drawId) {
          el = draws.get(i);
          break;
        }
      }

      if (el !== undefined) {
        moreInfo(el);
        console.log('popupOn = ' + popupOn);
        var category = getUrlParameter('category');

        if (decimo != null && decimo != "" && (decimo.length < 5)) {
          while (decimo.length < 5) {
            decimo = "0" + decimo;
          }
        }

        if (popupOn != null && popupOn != undefined && popupOn == 'on' && decimo != null && decimo != undefined && decimo != '') {
          try {
            jqResultadosBuscador('[id^="scrutinyModal-' + decimo + '-"]').click();
          } catch (error) {
            console.log('popup decimo on failed');
          }
        } else if (popupOn != null && popupOn != undefined && popupOn == 'on' && category != null && category != undefined) {
          try {
            jqResultadosBuscador('[id^="scrutinyModal-' + category + '-"]').click();
          } catch (error) {
            console.log('popup on failed');
          }
        } else if (popupMillionOn != null && popupMillionOn != undefined && popupMillionOn == 'on') {
          try {
            jqResultadosBuscador('#scrutinyModal-elMillon').click();
          } catch (error) {
            console.log('popupMillion on failed');
          }
        } else if (popupElige8On != null && popupElige8On != undefined && popupElige8On == 'on') {
          try {
            jqResultadosBuscador('#scrutinyModal-elige8-' + category).click();
          } catch (error) {
            console.log('popupElige8s on failed');
          }
        } else {
          console.log('Draw not found');
        }
      }
    }

  } catch (err) {
    console.log('Request Failed: ' + err);
  }
}

// Loads the draw data from the JSON service
function fetchDraws(startDate, endDate, replaceData) {
  if (replaceData) {
    activateLoader('draw-target');
  }

  var jsonServiceUrl = '/servicios/buscadorSorteos?game_id=' + gameCode + '&celebrados=true&fechaInicioInclusiva=' + startDate + '&fechaFinInclusiva='
    + endDate;

  jqResultadosBuscador.getJSON('//' + window.location.host + jsonServiceUrl, function(data) {
    if (data) {
      if (typeof data != 'string') {
        draws = data;

        if (replaceData) {
          page = 0;
        } else {
          page++;
        }
        
        loadTemplate('draw-template', replaceData);
        if (hasParametersUrl()) {
          setInDrawResult();
          popupThroughURL();
        }
      } else {
        console.debug('ERROR ' + data);
        if (replaceData) {
          noResultsMessage();
        } else {
          jqResultadosBuscador('#load-more-draws-target').remove();
        }
      }
    } else {
      console.debug('ERROR: no se han cargado los datos actualizados para la busqueda de sorteos de ' + gameCode);
      if (replaceData) {
        noResultsMessage();
      } else {
        jqResultadosBuscador('#load-more-draws-target').remove();
      }
    }

  }).fail(function(jqxhr, textStatus, error) {
    var err = textStatus + ', ' + error;
    console.log('Request Failed: ' + err);
    if (replaceData) {
      noResultsMessage();
    } else {
      jqResultadosBuscador('#load-more-draws-target').remove();
    }
  });
}

// Compiles the data with the Mustache template with Handlebars
function loadTemplate(templateId, replaceData) {
  var context = {
    draws: draws,
    startIndex: page * parseInt(maxDrawsLimit),
    showLoadMoreDrawsButton:  (draws.length === parseInt(maxDrawsLimit)),
    literalTxtDraw: literalTxtDraw,
    urlPathPrefix: urlPathPrefix,
    showGeoMapUrl: showGeoMapUrl,
  };

  if (gameCode === 'LAPR') {
    context.activationDateString = activationDateString;
  } else if (gameCode === 'LAQU') {
    context.showWinners = showWinners;
  }

  var template = Handlebars.compile(jqResultadosBuscador('#' + templateId).html());

  if (replaceData) {
    jqResultadosBuscador('html, body').animate({
      scrollTop: 0
    }, 'slow');
    jqResultadosBuscador('#draw-target').html(template(context));
  } else {
    jqResultadosBuscador('#load-more-draws-target').replaceWith(template(context));
  }

  loadMoreDrawsButton();
  activateModalAndMoreInfo();

  if (gameCode === 'LNAC') {
    checkSalesFilesExist();
    checkConsigmentFilesExist();
  }
}

function hasParametersUrl() {
  var result = false;
  if (window.location.search != "") {
    result = true;
  }
  return result;
}

function setInDrawResult() {
  var urlParams = new URLSearchParams(window.location.search);
  var date = urlParams.get('date');
  if (date !== null) {
    jqResultadosBuscador('[id^="qa_resultadoSorteo-masInfo-LNAC-"]').click();
    jqResultadosBuscador(window)
      .scrollTop(
        jqResultadosBuscador(jqResultadosBuscador("div[id^='qa_resultadoSorteo-masInfo-LNAC-']") && jqResultadosBuscador('div:contains(' + date + ')'))
          .offset().top);
  }
}

function loadMoreDrawsButton() {
  jqResultadosBuscador('#qa_resultadoSorteo-buscador-botonMasResultados-' + gameCode).click(function() {
    activateLoader('load-more-draws-target');

    if (searchStartDate !== undefined) {
      fetchDraws(searchStartDate, getModifiedDate(new Date(draws[draws.length - 1].fecha_sorteo), -1), false);
    } else {
      jqResultadosBuscador('#load-more-draws-target').remove();
    }
  });
}

function activateModalAndMoreInfo() {
  jqResultadosBuscador('[id^="scrutinyModal-"]').colorbox({
    inline: true,
    maxWidth: '850px',
    maxHeight: '740px',
    className: 'detalle-sorteo',
    scrolling: true
  });

  jqResultadosBuscador('[id^="scrutinyModal-"]').click(function() {
    var categoria = jqResultadosBuscador(this).data('categoria');
    var decimo = jqResultadosBuscador(this).data('decimo');
    var drawId = jqResultadosBuscador(this).data('drawid');
    var typeCss = jqResultadosBuscador(this).data('typecss');
    var detalleTxt = jqResultadosBuscador(this).data('detalletxt');
    var categoriaTxt = jqResultadosBuscador(this).data('categoriatxt');
    var viewShowMap = jqResultadosBuscador(this).data('viewshowmap');
    var urlGeoMap = jqResultadosBuscador(this).data('urlgeomap');

    if (decimo != undefined && decimo != null) {
      cargarPuntosDeVentaLnac(decimo, drawId, typeCss, detalleTxt, categoriaTxt, viewShowMap, urlGeoMap, isTopazEnabled);
    } else {
      cargarInfoPuntosDeVentaAll(categoria, drawId, typeCss, detalleTxt, categoriaTxt, viewShowMap, urlGeoMap, isTopazEnabled);
    }
  });

  jqResultadosBuscador('[id^="qa_resultadoSorteo-masInfo-"]').click(function(ev) {
    ev.preventDefault();
    ev.stopPropagation();

    moreInfo(this);
  });

  if (gameCode === 'EMIL') {
    jqResultadosBuscador('[id^="showResults-"]').click(function(ev) {
      ev.preventDefault();
      ev.stopPropagation();

      var displayedIconMoreInfo = jqResultadosBuscador(jqResultadosBuscador(this).find("i")[0]);

      var gameTypeId = jqResultadosBuscador(this).attr('id');
      var winnersDivId = "#results-" + gameTypeId.split("-")[1] + '-' + gameTypeId.split("-")[2];
      var winnersDiv = jqResultadosBuscador(winnersDivId);

      if (winnersDiv.attr("class").indexOf(hiddenClassName) >= 0) {
        if (displayedIconMoreInfo.attr("class").indexOf(displayedIconMoreInfoDownClass) >= 0) {
          displayedIconMoreInfo.removeClass(displayedIconMoreInfoDownClass).addClass(displayedIconMoreInfoUpClass);
        }
        winnersDiv.slideDown("slow", function() {
          winnersDiv.removeClass(hiddenClassName);
        });

      } else {
        if (displayedIconMoreInfo.attr("class").indexOf(displayedIconMoreInfoDownClass) === -1) {
          displayedIconMoreInfo.removeClass(displayedIconMoreInfoUpClass).addClass(displayedIconMoreInfoDownClass);
        }
        winnersDiv.slideUp("slow", function() {
          winnersDiv.addClass(hiddenClassName);
        });
      }
    });
  }

  isActivatedLoader = false;
}

function moreInfo(el) {
  var displayedIconMoreInfo = jqResultadosBuscador(jqResultadosBuscador(el).find("i")[0]);
  var moreInfoId = jqResultadosBuscador(el).attr('id');
  var moreInfoDiv = jqResultadosBuscador("#more-info-" + moreInfoId.split("-")[2] + '-' + moreInfoId.split("-")[3]);

  if (moreInfoDiv != null && moreInfoDiv.length) {
    if (moreInfoDiv.attr("class").indexOf(hiddenClassName) >= 0) {
      if (displayedIconMoreInfo.attr("class").indexOf(displayedIconMoreInfoDownClass) >= 0) {
        displayedIconMoreInfo.removeClass(displayedIconMoreInfoDownClass).addClass(displayedIconMoreInfoUpClass);
      }
      moreInfoDiv.slideDown("slow", function() {
        moreInfoDiv.removeClass(hiddenClassName);
      });
    } else {
      if (displayedIconMoreInfo.attr("class").indexOf(displayedIconMoreInfoDownClass) === -1) {
        displayedIconMoreInfo.removeClass(displayedIconMoreInfoUpClass).addClass(displayedIconMoreInfoDownClass);
      }
      moreInfoDiv.slideUp("slow", function() {
        moreInfoDiv.addClass(hiddenClassName);
      });
    }
  }
}

function activateLoader(targetId) {
  var context = {
    urlPathPrefix: urlPathPrefix
  };

  var template = Handlebars.compile(jqResultadosBuscador('#loader-template').html());

  jqResultadosBuscador('#' + targetId).html(template(context));

  jqResultadosBuscador("#draw-target").animate({
    scrollTop: jqResultadosBuscador('#draw-target')[0].scrollHeight - jqResultadosBuscador('#draw-target')[0].clientHeight
  }, 'slow');
  
  isActivatedLoader = true;
}

function noResultsMessage() {
  var context = {
    urlPathPrefix: urlPathPrefix
  };

  var template = Handlebars.compile(jqResultadosBuscador('#no-results-template').html());

  jqResultadosBuscador('#draw-target').html(template(context));

  isActivatedLoader = false;
}

// Date validation
function validateDates(startDate, endDate) {
  var errors = [];

  if ((!startDate || !isDate(startDate)) || (!endDate || !isDate(endDate))) {
    errors.push(literalMandatoryDate);
  } else {
    var date_startDate = getDateInSpanishFormat(startDate);
    var date_endDate = getDateInSpanishFormat(endDate);

    if (date_startDate.getTime() > new Date().getTime() || date_endDate.getTime() > new Date().getTime()) {
      errors.push(literalDateAfterToday);
    }

    if (errors.length === 0 && date_startDate.getTime() > date_endDate.getTime()) {
      errors.push(literalWrongOrderDates);
    }
  }

  return errors;
}

function displayErrorMessages(errors) {
  jqResultadosBuscador('#qa_resultadoSorteo-errors-' + gameCode).html('');
  jqResultadosBuscador('#qa_resultadoSorteo-errors-' + gameCode).addClass('esta-oculto');

  if (errors.length > 0) {

    var context = {
      gameCode: gameCode,
      errors: errors,
      urlPathPrefix: urlPathPrefix
    };

    var template = Handlebars.compile(jqResultadosBuscador('#errors-template').html());

    jqResultadosBuscador('#qa_resultadoSorteo-errors-' + gameCode).html(template(context));
    jqResultadosBuscador('#qa_resultadoSorteo-errors-' + gameCode).removeClass('esta-oculto');
  }
}

function getModifiedDate(date, extraDays) {
  return getDateAsParameter(addDaysToDate(date, extraDays));
}

function addDaysToDate(date, extraDays) {
  var extraMs = Math.floor(extraDays * (24 * 60 * 60 * 1000))
  return new Date(date.getTime() + extraMs);
}

function getDateAsParameter(date) {
  var dd = date.getDate();
  var mm = date.getMonth() + 1; // January is 0!
  var yyyy = date.getFullYear();

  if (dd < 10) {
    dd = '0' + dd;
  }

  if (mm < 10) {
    mm = '0' + mm;
  }

  return yyyy + '' + mm + '' + dd;
}

function isDate(date) {
  return (getDateInSpanishFormat(date) !== 'Invalid Date' && !isNaN(getDateInSpanishFormat(date))) ? true : false;
}

function getDateInSpanishFormat(dateString) {
  try {
    var parts = dateString.split('/');
    var date = new Date();
    date.setYear(parts[2]);
    date.setMonth(parseInt(parts[1]) - 1);
    date.setDate(parts[0]);
    return date;
  } catch (err) {
    return undefined;
  }
}

function changeCombinationOrder(gameCode, drawId, device){
	if(jqResultadosBuscador('#qa_resultado-combination-message-'+device+'-'+gameCode+'-'+drawId).hasClass('ordenadojs')){
		jqResultadosBuscador('#qa_resultado-combination-message-'+device+'-'+gameCode+'-'+drawId).html(literalAppearanceOrder);
		jqResultadosBuscador('#qa_resultado-combination-message-'+device+'-'+gameCode+'-'+drawId).removeClass('ordenadojs');
		jqResultadosBuscador('#qa_resultado-combination-actMainNumbers-'+gameCode+'-'+drawId).hide();
		jqResultadosBuscador('#qa_resultado-combination-mainNumbers-'+gameCode+'-'+drawId).show();
	}else{
		jqResultadosBuscador('#qa_resultado-combination-message-'+device+'-'+gameCode+'-'+drawId).html(literalIncreasingOrder);
		jqResultadosBuscador('#qa_resultado-combination-message-'+device+'-'+gameCode+'-'+drawId).addClass('ordenadojs');
		jqResultadosBuscador('#qa_resultado-combination-mainNumbers-'+gameCode+'-'+drawId).hide();
		jqResultadosBuscador('#qa_resultado-combination-actMainNumbers-'+gameCode+'-'+drawId).show();
		}
}</script>

<script>
  var gameCode = 'LAQU';
  var urlPathPrefix = '/f';
  var defaultTextModal = "<p><strong>Lo sentimos, no hay informaci&oacute;n disponible o no se ha podido acceder a la misma.</strong></p><p>Int&eacute;ntalo pasados unos minutos.</p>";
  var literalSellingPoint = "Repartido en";
  var literalPopulation = "Poblaci&oacute;n:";
  var literalAddress = "Direcci&oacute;n:";
  var literalProvince = "Provincia:";
  var literalPostalCode = "C&oacute;digo Postal:";
  var literalPhone = "Tel&eacute;fono:";
  var literalFURL = "Detalles del Punto de Venta";
  var literalViewMap = "Ver en mapa";
  var linkClubConmigoOnlineUrl = "https://juegos.loteriasyapuestas.es/jugar/cas/configuracion/club_conmigo_online/?access=red-comercial&lang=es";
  var linkClubConmigoOnlineTitle = "Asociar al Club Conmigo Online";
  var literalOnlineSale = "Repartido a trav&eacute;s de la web oficial";
  var literalOnlineSaleLink = "www.loteriasyapuestas.es";
  var roundLabel = 'Jornada {0}&#x00aa;';
  var mobileRoundLabel = '- J{0}&#x00aa;';
  var literalMandatoryDate = "Las fechas son obligatorias";
  var literalWrongOrderDates = "La fecha de inicio introducida es posterior a la fecha de fin";
  var literalDateAfterToday = "Las fechas no pueden ser posteriores al d&iacute;a de hoy";
  var literalTxtDraw = 'Sorteo';
  var showGeoMapUrl = 'true';
  var maxDaysLimit = '92';
  var maxDrawsLimit = '80';
  var showWinners = false;
  
  var currentLanguage = 'es';
</script>

<link rel="stylesheet" href="/f/loterias/estaticos/css/modal.css" />
<link rel="stylesheet" href="/f/loterias/estaticos/css/colorbox.css" />
<script src="/f/loterias/estaticos/js/jquery.colorbox-min.js"></script>
<div class="contenedor textoCuerpo elementoOff">
	<div id='inline_content' class="popUpAgraciados">
		<p><strong>Lo sentimos, no hay informaci&oacute;n disponible o no se ha podido acceder a la misma.</strong></p><p>Int&eacute;ntalo pasados unos minutos.</p></div>
</div>
<script>
  var receiverIdSelae = "105"
</script>
<script src="/f/loterias/estaticos/js/modalRepartidoEn.js"></script>

<!-- BUSCADOR -->
<div class="r-buscador-sorteos">
	<div class="c-buscador-sorteos c-buscador-sorteos--quiniela">
		<p class="c-buscador-sorteos__titulo--pc c-buscador-sorteos__titulo--quiniela" id="qa_resultadoSorteo-buscador-titulo-LAQU">
			</p>
		<p class="c-buscador-sorteos__titulo c-buscador-sorteos__titulo--quiniela" id="qa_resultadoSorteo-buscador-subtitulo-LAQU">
			Buscar Sorteos</p>
		<form class="c-buscador-sorteos__formulario">
			<div class="c-buscador-sorteos__fecha-inicial">
				<p class="c-buscador-sorteos__texto-fecha-inicial">
					<span class="c-buscador-sorteos__txt-sorteos c-buscador-sorteos__txt-sorteos--quiniela esta-oculto-movil">
						Buscar Sorteos</span> 
					<span class="c-buscador-sorteos__txt-desde c-buscador-sorteos__txt-desde--quiniela">
						Desde</span>
				</p>
				<input class="c-buscador-sorteos__input-fecha-inicial c-buscador-sorteos__input-fecha-inicial--quiniela" type="text" placeholder="dd/mm/aaaa" autocomplete="off" name="desde" id="qa_resultadoSorteo-buscador-fechaDesde-LAQU">
				<div class="alerta" id="qa_resultadoSorteo-buscador-error-fechaDesde"></div>
			</div>
			<div class="c-buscador-sorteos__fecha-final">
				<p class="c-buscador-sorteos__texto-hasta c-buscador-sorteos__texto-hasta--quiniela">
					Hasta</p>
				<input class="c-buscador-sorteos__input-fecha-final c-buscador-sorteos__input-fecha-final--quiniela" type="text" placeholder="dd/mm/aaaa" autocomplete="off" name="hasta" id="qa_resultadoSorteo-buscador-fechaHasta-LAQU">
				<div class="alerta" id="qa_resultadoSorteo-buscador-error-fechaHasta"></div>
			</div>
			<div class="c-buscador-sorteos__error esta-oculto" id="qa_resultadoSorteo-errors-LAQU">
			</div>
			<a class="c-buscador-sorteos__enlace-jugar" href="#" title="">
				<button class="c-buscador-sorteos__boton-jugar" href="#" id="qa_resultadoSorteo-buscador-botonBuscar-LAQU">
					Buscar</button>
			</a>
		</form>
	</div>
</div>

<!-- RESULTADOS -->
<div class="r-resultados-buscador">
	<div class="c-resultados-buscador" id="draw-target">
		<div class="c-resultados-buscador__loader-resultados-contenedor">
			<img class="c-resultados-buscador__loader-resultados-img" src="/f/loterias/estaticos/imagenes/sass/Spinner-1.1s-136px.gif">
			<p class="c-resultados-buscador__loader-resultados-text">Cargando...</p>
		</div>
	</div>
</div></div>
<div class="portal-seccion-historico" >

			    <div class="r-boton-historico-resultados">
    <div class="c-boton-historico-resultados">
        <a class="c-boton-historico-resultados__enlace--laquiniela esta-oculto-movil" title="Histórico Resultados" href="https://www.loteriasyapuestas.es/f/loterias/documentos/Quiniela/Calendarios/HistoricoQuiniela.xls">
            <img class="c-boton-historico-resultados__imagen" src="/f/loterias/estaticos/imagenes/sass/Historico-resultados_quiniela.svg">
            <img class="c-boton-historico-resultados-hover__imagen" src="/f/loterias/estaticos/imagenes/sass/historico-resultados-hover.svg">
            <p class="c-boton-historico-resultados__texto--laquiniela" id="qa_resultadoSorteo-botonHistoricoResultados-LAQU">Histórico Resultados</p>
        </a>
         <a class="c-boton-historico-resultados__enlace--laquiniela esta-oculto-pc" title="Histórico Resultados" href="https://www.loteriasyapuestas.es/f/loterias/documentos/Quiniela/Calendarios/HistoricoQuiniela.xls">
            <img class="c-boton-historico-resultados__imagen" src="/f/loterias/estaticos/imagenes/sass/Historico-resultados_quiniela.svg">
            <img class="c-boton-historico-resultados-hover__imagen" src="/f/loterias/estaticos/imagenes/sass/historico-resultados-hover.svg">
            <p class="c-boton-historico-resultados__texto--laquiniela" id="qa_resultadoSorteo-botonHistoricoResultados-LAQU">Histórico Resultados</p>
        </a>
    </div>
</div></div>
<div class="portal-seccion-enlace-volver" >

			    <script type="text/javascript">var hiddenClassName = 'esta-oculto';
var displayedIconMoreInfoUpClass = 'fa-angle-up';
var displayedIconMoreInfoDownClass = 'fa-angle-down';
var jqReturnLink = jQuery.noConflict();

jQuery(document).ready(function() {

  jqReturnLink('#qa_boton_volver').click(function(ev) {
    ev.preventDefault();

    window.history.back();
  });
});</script>

<div class="r-volver">
    <div class="c-volver"  id="qa_sorteosDirecto-iframe">
        <a class="c-volver__enlace" title="volver"  id="qa_boton_volver">
            <p class="c-volver__texto">volver</p>
        </a>
    </div>
</div></div>
<div class="portal-seccion-footer" >

			    <div class="r-pie">
		<div class="c-pie">
			<div class="c-pie__content">
				<div class="c-pie__item c-pie__item--descarga">
					<!-- 
					<p class="c-pie__texto" id="qa_pie_texto_descargaNuestraApp">
						</p>
					 -->
					<div class="contenido-descargas">
						<a href="https://www.loteriasyapuestas.es/es/appselae" class="c-pie__enlace-descarga" id="qa_pie_boton_disponibleEnAndroidAppStore1"> 
								<img src="/f/loterias/estaticos/imagenes/sass/android.svg" class="c-pie__imagen-descarga"><span class="c-pie__titulo-destacado">Disponible para</span><span class="c-pie__texto-destacado">Android</span></a>
						<a href="https://itunes.apple.com/es/app/misloterias/id536094772?mt=8&ls=1" class="c-pie__enlace-descarga" id="qa_pie_boton_disponibleEnAndroidAppStore2"> 
								<img src="/f/loterias/estaticos/imagenes/sass/app_store.svg" class="c-pie__imagen-descarga"><span class="c-pie__titulo-destacado">Disponible en la</span><span class="c-pie__texto-destacado">App Store</span></a>
						</div>
				</div>
				
				<div class="c-pie__item c-pie__item--redes-sociales">
					<div class="c-pie__separador"></div>

					<a href="https://www.facebook.com/loteriasyapuestas.es" class="c-pie__enlace-redes-sociales" id="qa_pie_boton_redSocial1" target="_blank"> 
							<img src="/f/loterias/estaticos/imagenes/sass/facebook.svg" class="c-pie__imagen-redes-sociales">
						</a>
					<a href="https://twitter.com/loterias_es" class="c-pie__enlace-redes-sociales" id="qa_pie_boton_redSocial2" target="_blank"> 
							<img src="/f/loterias/estaticos/imagenes/sass/twitter.svg" class="c-pie__imagen-redes-sociales">
						</a>
					<a href="https://www.youtube.com/user/loteriasyap" class="c-pie__enlace-redes-sociales" id="qa_pie_boton_redSocial3" target="_blank"> 
							<img src="/f/loterias/estaticos/imagenes/sass/youtube.svg" class="c-pie__imagen-redes-sociales">
						</a>
					<div class="c-pie__separador"></div>
					
					<a href="/es/contacto" class="c-pie__enlace-redes-sociales" id="qa_pie_enlace_contacto1"> 
							<img src="/f/loterias/imagenes/contacto_pie.svg" class="c-pie__imagen-redes-sociales c-pie__imagen-redes-sociales--contactos" id="qa_pie_logo_contacto1">
							<span class="c-pie__enlace-text-redes-sociales">Contacto</span>
						</a>
					<a href="/es/contacto" class="c-pie__enlace-redes-sociales" id="qa_pie_enlace_contacto2"> 
							<img src="/f/loterias/estaticos/imagenes/sass/headset.svg" class="c-pie__imagen-redes-sociales c-pie__imagen-redes-sociales--contactos" id="qa_pie_logo_contacto2">
							<span class="c-pie__enlace-text-redes-sociales">900 11 23 13 / 91 596 23 00</span>
						</a>
					<div class="c-pie__separador"></div>
				</div>
				
				<div class="c-pie__item c-pie__item--formas-pago">
					<a href="https://www.loteriasyapuestas.es/es/centro-de-ayuda/lotobolsa/pago-seguro-con-tarjeta-de-credito-debito" class="c-pie__enlace-pago" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/visa.svg" class="c-pie__logo-pago" id="qa_pie_formasDePago1">
						
						</a>
						<a href="https://www.loteriasyapuestas.es/es/centro-de-ayuda/lotobolsa/pago-mediante-banca-electronica" class="c-pie__enlace-pago" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/traspaso.svg" class="c-pie__logo-pago" id="qa_pie_formasDePago2">
						
						</a>
						<a href="https://www.loteriasyapuestas.es/es/centro-de-ayuda/lotobolsa/pago-por-paypal" class="c-pie__enlace-pago" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/paypal.svg" class="c-pie__logo-pago" id="qa_pie_formasDePago3">
						
						</a>
						</div>
				
				<div class="c-pie__item c-pie__item--menu">
					<a href="https://www.selae.es/es/web-corporativa/quienes-somos" class="c-pie__enlace-menu" id="qa_pie_enlaces_interes1" target="_blank">
							Conócenos</a>
						<div class="c-pie__separador"></div>
						<a href="https://www.loteriasyapuestas.es/es/centro-de-ayuda/centro-de-informacion-y-ayuda" class="c-pie__enlace-menu" id="qa_pie_enlaces_interes2" target="_blank">
							Centro de Ayuda</a>
						<div class="c-pie__separador"></div>
						<a href="/es/centro-de-ayuda/informacion-pie/seguridad" class="c-pie__enlace-menu" id="qa_pie_enlaces_interes3" target="_blank">
							Seguridad</a>
						<div class="c-pie__separador"></div>
						<a href="https://www.loteriasyapuestas.es/es/juego-responsable" class="c-pie__enlace-menu" id="qa_pie_enlaces_interes4" target="_blank">
							Juego Responsable</a>
						<div class="c-pie__separador"></div>
						<a href="/es/centro-de-ayuda/informacion-pie/aviso-legal" class="c-pie__enlace-menu" id="qa_pie_enlaces_interes5" target="_blank">
							Aviso Legal</a>
						<div class="c-pie__separador"></div>
						<a href="/es/centro-de-ayuda/informacion-pie/estipulaciones-proteccion-datos" class="c-pie__enlace-menu" id="qa_pie_enlaces_interes6" target="_blank">
							Protección de datos</a>
						<div class="c-pie__separador"></div>
						<a href="/es/centro-de-ayuda/informacion-pie/politica-de-uso-de-la-web-y-sitios-moviles-webs-juego-y-corporativa" class="c-pie__enlace-menu" id="qa_pie_enlaces_interes7" target="_blank">
							Uso Web</a>
						</div>
				
				<div class="c-pie__item c-pie__item--logos">
					<a href="https://www.selae.es/es/web-corporativa/responsabilidad-social/gestion-responsable-del-juego/proteccion-a-menores" class="c-pie__enlace-aviso" id="qa_pie_logos_certificados1" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/major18.svg" class="c-pie__imagen-aviso">
						
						</a>
						<a href="http://www.ordenacionjuego.es/es/rgiaj" class="c-pie__enlace-aviso" id="qa_pie_logos_certificados2" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/warning.svg" class="c-pie__imagen-aviso">
						
						</a>
						<a href="https://www.juegoseguro.es/" class="c-pie__enlace-aviso" id="qa_pie_logos_certificados3" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/juego_seguro.svg" class="c-pie__imagen-aviso">
						
						</a>
						<a href="https://www.jugarbien.es/" class="c-pie__enlace-aviso" id="qa_pie_logos_certificados4" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/jugar_bien.svg" class="c-pie__imagen-aviso">
						
						</a>
						<a href="/es/web-corporativa/responsabilidad-social" class="c-pie__enlace-aviso" id="qa_pie_logos_certificados5" target="_blank">
						<img src="/f/loterias/estaticos/imagenes/sass/rsc.svg" class="c-pie__imagen-aviso">
						
						</a>
						<a href="https://www.ordenacionjuego.es/es/op-SELAE" class="c-pie__enlace-aviso" id="qa_pie_logos_certificados6" target="_blank">
						<img src="/f/loterias/imagenes/mig/imagenes/juego_autorizado.svg" class="c-pie__imagen-aviso">
						
						</a>
						</div>
				
				<div class="c-pie__item c-pie__item--copyright">
					<p class="c-pie__texto-copyright" id="qa_pie_textoCopyright">
                    	2021 &#x00a9; SELAE<span class="c-pie__texto-legal" id="qa_pie_textoLegal">
           					Todas las marcas de SELAE est&aacute;n registradas y est&aacute; prohibido el uso de estas por terceros sin autorizaci&oacute;n expresa de SELAE- Loter&iacute;as y Apuestas del Estado</span>
                	</p>
            	</div>
			</div>
		</div>
	</div>
</div>
<!-- Fin Contenido -->
		</div>
	</body>
</html>
<!--GR:RG61-->
  recorded_at: Wed, 25 Aug 2021 16:18:05 GMT
recorded_with: VCR 6.0.0
